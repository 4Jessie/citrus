 ------
 Citrus Modules Introduction
 ------

Modules

[${site_url}/images/modules.png] Modules

* citrus (POM)

  This is the main parent project and contains the general configuration, such as for

  * site generation

  * all project dependencies in a dependency management section

  * overall project information, such as mailing lists etc.

  * sub modules

* citrus-core (JAR)

  The <<citrus-core>> module builds the core functionality of the framework such as
  
  * domain model (TestCase, TestSuite, CitrusApplication, ...)
  
  * test actions (send, receive, sleep, databaseQuery, ...)
  
  * validation implementation (XML tree validation, XPath element validation)
  
  * utils

* citrus-http (JAR)

  This module contains special HTTP Server implementation used as adapter when sending and receiving messages over HTTP.

* citrus-ws (WAR)

  WebService adapter used to send and receive messages via SOAP.

* citrus-tibco (JAR)

  This module holds TIBCO specific test actions in order to connect with TIBCO Hawk and Collaborator.

* citrus-integration (JAR)

  The <<citrus-integration>> module contains integration tests that will be executed during the build lifecycle. The
  tests are seperated in an extra module, because ActiveMQ Broker, HTTP stub and WS-Stub are started and stopped automatically.

Dependencies

 Dependencies are managed with various POM files:

 * <<PROJECT_HOME>></pom.xml> \
   Contains all available dependencies (jars) for the framework including
   version numbers. If you need a new library, add it here.
   
 * <<PROJECT_HOME>></modules/citrus-tibco/pom.xml> \
   Contains very specific TIBCO dependencies only used by this module. TIBCO dependencies go in here.

 * The same applies to other modules. In case a dependency is very specific to a module the dependency goes into the modules POM. 
   If you need a library specific for a module, add it there.

 Note: If a new library in turn needs another new library the preferred way is to let Maven resolve this dependency. I.e. you need not declare this dependency explicitly.

 A general rule for dependencies: add a dependency if

 [[1]] it is directly referenced in the module sources, <<and>>

 [[2]] it is not transitively inherited

 []
 
 Last note: Beware of the {{{http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Scope}Maven scopes}}!
