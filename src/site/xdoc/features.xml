<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
  <properties>
    <title>Features</title>
  </properties>
  <body>
    <section name="Features">
      <p>
        See below a list of features that Citrus provides as a test automation framework for enterprise integration testing. If you are missing a feature in Citrus
        please help us and submit a <a href="http://citrus.idea.informer.com/proj/?mod=one" target="_blank">feature request</a>. You can also just <a href="http://citrus.idea.informer.com/proj/?mod=one" target="_blank">vote</a> 
        for ideas and features, so we can start developing those things that are most relevant for you.
      </p>
      
      <p>Control the test flow</p>
      <ul>
        <li>Send and receive messages and specify control messages for validation</li>
        <li>Simulate interface partners supporting a wide range of protocols (Http, JMS, SOAP WebServices, TCP/IP, ...)</li>
        <li>Force timeouts and error situations</li>
        <li>Define the sequence of messages</li>
        <li>Wait for messages to arrive</li>
        <li>Trigger messages and validate responses</li>
        <li>Save dynamic message content and reuse those later in test case (proper response generation with dynamic identifiers)</li>
        <li>Test complex messaging scenarios with step by step sequence of operations</li>
        <li>Use advanced logic in test cases (loops, delays, retries, parallel sections, ...)</li>
      </ul>
      
      <p>Message validation</p>
      <ul>
        <li>Message header validation</li>
        <li>XML message payload validation</li>
          <ul>
            <li>XML tree comparison</li>
            <li>XPath element validation</li>
            <li>Groovy XML validation</li>
          </ul> 
        <li>XML schema and DTD validation</li>
        <li>Groovy message validaiton</li>
      </ul>
      
      <p>Database access/validation</p>
      <ul>
        <li>Validate existence of data</li>
        <li>Prepare/simulate database content</li>
        <li>Execute queries and use database content in tests</li>
      </ul>
      
      <p>Test writing</p>
      <ul>
        <li>Human readable tests (XML format)</li>
        <li>Simple test creation (cross-editor support, XML schema support)</li>
        <li>Separation of test cases and environment configurations (easy environment switching, improved maintenance)</li>
      </ul>
      
      <p>Effective testing</p>
      <ul>
        <li>Test grouping / test templates / test suites</li>
        <li>IDE support (execute tests as TestNG/JUnit tests from Eclipse, IntelliJ IDEA or NetBeans)</li>
        <li>Integration into build lifecycle (Maven, ANT)</li>
        <li>Reliable failure descriptions</li>
        <li>Reports and test results</li>
        <li>Parallel test execution realistic message load on tested system and faster test runs</li>
        <li>Provide test plan and document test coverage</li>
      </ul>   
      
      <p>Framework extensions</p>
      <ul>
        <li>Write adapters to support more protocols</li>
        <li>Write customized functions</li>
        <li>Write customized test actions</li>
        <li>Execute Groovy code</li>
      </ul>
    </section>
  </body>
</document>
