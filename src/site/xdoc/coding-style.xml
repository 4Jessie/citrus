<?xml version="1.0" encoding="ISO-8859-1"?>

<document>

  <properties>
    <title>Coding Style</title>
  </properties>

  <body>
    <section name="Coding Style">
      <p>
        <em>Style</em> matters. Not for beauty but for getting a 'home-feeling'
        and speaking a common language when talking about code. So please read
        this guide carefully.
      </p>

      <p>
        <strong>Please be sure that you follow these guide lines !</strong>. If you
        don't like a rule, open a discussion - we can always talk about changes.
      </p>
      <subsection name="Process">
        <p>
         Please be fair and verify before you check-in that your code <em>compiles</em> (of course)
         <strong>and</strong> that all unit test passes. I.e.
         <listing>
            mvn clean install
         </listing>
         must succeed successfully.
         </p>
         <p>
           Another point is to have a regular at the test coverage. Try to keep
           the test coverage as high as possible. Fix checkstyle errors as soon as
           possible before they will bite us.
         </p>
      </subsection>
      <subsection name="Naming">
        <ol>
          <li>
            <p>
              Name your access and setting method according to the Java
              Bean scheme. I.e use <code>getApple()</code> and
              <code>setApple(Apple a)</code> <em>not</em>
              <code>fetchApple()</code> and <code>storeApple(Apple
              a)</code> if you merely want to set an object's attribute.
              Name the accessors/setter method after the object it going
              to get/set if possible, i.e.  <code>getStatus()</code>
              <em>not</em> <code>getMyStatus()</code>.
            </p>
          </li>

          <li>
            <p>
              <em>Class</em>, <em>Method</em> and <em>Member
              variables</em> names are in mixed case. I.e there are
              never to capital letters adjacent. Remember, even acronyms
              like 'ID' or 'JTAPI' in class or method names must follow
              this rule
            </p>
            <p>
              <table>
                <tbody>
                  <tr>
                    <th>Bad</th>
                    <th>Good</th>
                  </tr>
                  <tr>
                    <td>class ITAction</td>
                    <td>class ItAction</td>
                  </tr>
                  <tr>
                    <td>getTestID()<br/>getTestid()</td>
                    <td>getTestId()</td>
                  </tr>
                  <tr>
                    <td>class JTAPIProvider</td>
                    <td>class JtapiProvider</td>
                  </tr>
                  <tr>
                    <td>int TestID</td>
                    <td>int testId</td>
                  </tr>
                </tbody>
            </table>
            </p>
          </li>
          <li>
            <p>
              <em>Class</em> names always start with an upper case
            </p>
          </li>
          <li>
            <p>
              <em>Method</em> and <em>Member variables</em> names are always starting with lower case
            </p>
          </li>
          <li>
            <p>
              The name of standard implementations of interfaces end with <code>Impl</code> and live
              in a subpackaged <code>impl</code>. Example: <code>com.consol.citrus.core.service.ActionService</code>
              and <code>com.consol.citrus.core.service.impl.ActionServiceImpl</code>
            </p>
          </li>
          <li>
            <p>
              Test classes have to end with <code>Test</code> and should
              live in a subpackage called <code>test</code> (minus
              <code>impl</code>). E.g. <code>com.consol.citrus.core.service.impl.ActionServiceImpl</code>
              and
              <code>com.consol.citrus.core.service.test.ActionServiceImplTest</code>
            </p>
          </li>
        </ol>
      </subsection>
      <subsection name="Formatting">
        <p>
          The following rules are verified daily by <a
          href="http://checkstyle.sourceforge.net/">Checkstyle</a>. So
          the first and most important rule is to look regularly to
          our checkstyle reports!!
        </p>
        <p>You can configure your IDE to use the Citrus checkstyle rules.</p>
        <ol>
          <li>
            <p>
              <strong>No tabs</strong>. Period. Indentation must be 4 blanks for Java and 2 blanks for XML.
            </p>
          </li>
          <li>
            <p>
              Curly braces start <em>on the same line as the statement</em>
            <pre>         if (foo == 12) {
             doSomething();
         }
         else {
             doSomethingOther();
         }
            </pre>
            not
            <pre>         if (foo == 12)
         {
             doSomething();
         }
         else
         {
             doSomethingOther();
         }
            </pre>
            </p>
          </li>
          <li>
            <p>
            Each block must be surrounded by curly
            braces if it is only one line. The code is
            more readable and more error proof, e.g.
            think about an extra line to the block. Chances
            a high, that you forget to insert the now
            necessary braces. <br/>
            This means that the following code shouldn't
            be used:
  <pre>  if ( a &gt; 0 )
      b = 1;
      </pre>
  but use
  <pre>  if ( a &gt; 0 ) {
      b = 1;
   }
      </pre>
            </p>
          </li>
          <li>
            <p>
              Don't use lines larger than 100 characters.
            </p>
          </li>
          <li>
            Import statements
            <ul>
              <li> Qualify for clarity
                <p>Group by prefix like java.*, javax.* and rest:
<pre>
import java.util.Map;
import java.util.HashMap;

import javax.mail....
import javax....

import org.apache.commons.logging.Log;
import ....

import com.consol.citrus.....
</pre>
                </p>
              </li>
              <li>Keep the order (see before)</li>
              <li>Use unqualified imports only for mass imports (e.g. count &gt; 3):
                <p>import static org.easymock.EasyMock.*</p>
              </li>
            </ul>
          </li>
        </ol>
      </subsection>
    </section>

    <section name="Logging">
      <ul>
        <li>We use <a href="http://www.slf4j.org/">SLF4J</a> for logging. Internal we use the well known <a href="http://logging.apache.org/log4j">Log4J</a> API, which is provided by SLF4J.
        </li>
        <li>Declare it to be reusable in sub classes:
          <pre>
final protected Log log = LoggerFactory.getLogger(getClass());
          </pre>
        </li>
        <li>Always check the level for debug and trace messages:
          <pre>
if(log.isDebugEnalbed()) {
   log.debug("Foo");
}
          </pre>
        </li>
        <li>Log exceptions correctly:
          <pre>
...
} catch(Exception ex) {
   log.error("Foo causes a problem", ex);
   ...
}
          </pre>
          <p>
          Never use printStackTrace for Exceptions.
          Let the logging and the log configuration deal with it by correctly passing the
          exception as an additional argument.
          </p><br/>
        </li>
        <li>
          Don't use <em>System.out</em> for production and test code output.
          Use the logging framework as System.out is synchronized, not flexible configurable
          and for tests fill up uncontrolled the log files (console output!).
        </li>
      </ul>
    </section>
  </body>
</document>
