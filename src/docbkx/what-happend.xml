<?xml version="1.0" encoding="UTF-8"?>
<chapter id="whathappend">
  <title>What happend before</title>

  <para>This section summarizes previous release changes and features for you, so you have the complete picture what has happend so far in the last releases.</para>
  
  <section id="whathappend-groovy">
    <title>New groovy features</title>

    <para>Citrus extended the possibilities to work with script languages like Groovy. You can use Groovy's MarkupBuilder to create 
    XML message payloads. Your Groovy code goes right into the test case or comes from external file. With MarkupBuilder you
    do not need to care about XML message syntax and overhead. Just focus on the pure message content. You can read the details in 
    <xref linkend="groovy-markupbuilder"/>.</para>
    
    <para>Further Groovy feature goes to the validation capabilities. Instead of working with XML DOM tree comparison and XPath expression validation you
    can use Groovy XMLSlurper. This is very useful for those of you who need to do complex message validation and do not like the XML/XPath syntax at all. With
    XMLSlurper you can access the XML DOM tree via named closure operations which feels great. This especially comes in handy for complex generic XML structures
    as you can search for elements, sort element list and use the powerful contains operation. This is all described in <xref linkend="groovy-xmlslurper"/>.</para>
    
    <para>Some other Groovy support extension comes in SQL result set validation (<xref linkend="actions-database-groovy"/>). When reading data from the database someone is able to validation the
    resulting data row set with Groovy script. The script code easily accesses the rows and columns with Groovy's out-of-the-box list and map handling. This
    adds very powerful validation to multi-row data sets from the database.</para>
  </section>
  
  <section id="whathappend-sql">
    <title>SQL multi-line result set validation</title>
    
    <para>In this new Citrus version the tester can validate SQL Query results that have multiple rows. In the past Citrus could only handle a single row in the
    result set. Now this new release brings light into the dark. See also the new Groovy SQL result set validation which fits brilliant for complex multi-row 
    SQL result set validation. The details can be found in <xref linkend="actions-database-query"/></para>
  </section>
  
  <section id="whathappend-message-types">
    <title>Extended message format support</title>
    
    <para>In previous versions Citrus was primary designed to handle XML message payloads. With this new release Citrus is also able to work with other message formats
    such as JSON, CSV, PLAINTEXT. This applies to sending messages as well as receiving and particularly validating message payloads. The tester can specify several message
    validators in Citrus for different message formats. According to the expected message format the proper validator is chosen to perform the message validation.</para>
    
    <para>We have implemented a JSON message validator capable of ignoring specific JSON entries and handling JSONArrays. We also provide a plain text message validator which
    is very basic to be honest. The framework is ready to receive new validator implementations so you can add custom validators for your specific needs.</para>
  </section>
  
  <section id="whathappend-xml">
    <title>New XML features</title>
    
    <para>XML namespace handling is tedious expecially if you have to deal with a lot of XPath expressions in your tests. Before you had need to specify a namespace
    context for the XPath expression every time you use them in your test - now you can have a central namespace context which declares namespaces you use in your project.
    These namespaces identified by some prefix are available throughout the test project which is much more maintainable and easy to use. See how it works in 
    <xref linkend="xpath-namespace"/>.</para>
  </section>
  
  <section id="whathappend-soap">
    <title>SOAP support improvements</title>
    
    <para>WsAddressing standard is now supported in Citrus (<xref linkend="soap-ws-adressing"/>). This means you can declare the specific WsAddressing message headers on message 
    sender level in order to send messages with WsAddressing feature. The header is constructed automatically for all SOAP messages that are sent over the message sender.</para>
    
    <para>Dynamic SOAP endpoint uri resolver enables you to dynamically address SOAP endpoints during a test. Sometimes a message sender may dynamically have to change the SOAP
    url for each call (e.g. address different request uri parts). With a endpoint uri resolver set on the message sender you can handle this requirement very easy. The tip for 
    dynamic endpoint resolving was added to <xref linkend="soap-sender"/></para>
    
    <para>We also simplified the synchronous SOAP HTTP communication within test cases. In previous versions you had to build complex parallel and sequential container constructs
    in order to continue with test execution while the SOAP message sender is waiting for the synchronous response to arrive. Now you can simply fork the message sending action and
    continue with further test actions while synchronous SOAP communication takes place. See the <xref linkend="soap-fork-mode"/> for details</para>
    
    <para>Some really small change introduced with this release is the fact that Citrus now logs SOAP messages in their pure nature. This means that you can see the complete SOAP 
    envelope of messages in the Citrus log files. This is more than helpful when searching for errors inside your test case.</para>
  </section>
  
  <section id="whathappend-http">
    <title>Http and RESTful WebServices</title>
    
    <para>We have changed Http communication components for full support of RESTful WebServices on client and server side. The Http client now uses Spring's REST support for
    Http requests (GET, PUT, DELETE, POST, etc.). The server side has changed, too. The Http server now provides RESTful WebServices and is compliant to the existing SOAP Jetty server
    implementation in Citrus. If you want to upgrade existing projects to this version you may have to adjust the Spring application context configuration to some extent.</para>
    
    <para>For details have a look at the explanations to the new Http components in <xref linkend="http"/>.</para>
  </section>
  
  <section id="whathappend-html-report">
    <title>HTML reporting</title>
    
    <para>Citrus provides HTML reports after each test run with detailed information on the failed tests. You can immediately see which tests failed in execution and where the test
    stopped. <xref linkend="reporting-html"/> provides details on this new feature.</para>
  </section>
  
  <section id="whathappend-validation">
    <title>Validation matchers</title>
    
    <para>The new validation matchers will put the message validation mechanisms to a new level. With validation matchers you are able to execute powerful assertions on each message content element.
    For instance you can use the isNumber validation matcher for checking that a message value is of numeric nature. We added several matcher implementations that are ready for usage in your test but you can
    also write your custom validation matchers. Have a look at <xref linkend="validation-matchers"/> for details.</para>
  </section>
  
  <section id="whathappend-conditional">
    <title>Conditional container</title>
    
    <para>The new conditional test action container enables you to execute test actions only in case a boolean expression evaluates to true. So the nested test actions inside the container may be not 
    executed at all in case a condition is not met. See <xref linkend="containers-conditional"/> for details.</para>
  </section>
  
  <section id="whathappend-channel-selector">
    <title>Support for message selectors on message channels</title>
    
    <para>Spring Integration message channels do not support message selectors like JMS queues do for example. With Citrus 1.2 we implemented a solution for this issue with a special message channel
    implementation. So you can use the message selector feature also when using message channels. Go to <xref linkend="message-channel-selector-support"/> for details.</para>
  </section>
  
  <section id="whathappend-actions">
    <title>New test actions</title>
    
    <para>We introduced some completely new test actions in this release for you. The new actions are listed below:</para> 
    
    <itemizedlist>
        <listitem><para>Purge message channel action (<xref linkend="actions-purge-channels"/>)</para></listitem>
    </itemizedlist>
    
    <para>See <xref linkend="actions"/> for detailed instructions how to use the new actions.</para>
  </section>
  
  <section id="whathappend-functions">
    <title>New functions</title>
    
    <para>We introduced some new default Citrus functions that will ease the testers life. This includes commonly used functions like encoding/decoding base64 bindary data, escaping XML and generating 
    random Java UUID values. These are the new functions in this release:</para>
    
    <itemizedlist>
        <listitem><para>citrus:randomUUID()</para></listitem>
        <listitem><para>citrus:cdataSection()</para></listitem>
        <listitem><para>citrus:encodeBase64()</para></listitem>
        <listitem><para>citrus:decodeBase64()</para></listitem>
        <listitem><para>citrus:digestAuthHeader()</para></listitem>
        <listitem><para>citrus:localHostAddress()</para></listitem>
    </itemizedlist>
    
    <para>See <xref linkend="functions"/> for detail descriptions of each function.</para>
  </section>
  
</chapter>