<?xml version="1.0" encoding="UTF-8"?>
<chapter id="schema-validation">
    <title>XML schema validation</title>
    
    <para>There are several possibilities to describe the structure of XML documents. The two most popular ways are DTD 
    (Document type definition) and XSD (XML Schema definition). Once a XML document has decided to be classified using a schema 
    definition the structure of the document has to fit the predefined rules inside the schema definition. XML document instances 
    are valid only in case they meet all these structure rules defined in the schema definition. 
    Currently Citrus can validate XML documents using the schema languages DTD and XSD.</para>

    <section id="xsd-validation">
        <title>XSD schema validation</title>
        
        <para>Citrus handles XML schema definitions in order to validate incoming XML documents. Consequential the message receiving 
        actions have to know the respective XML schema (*.xsd) file resources to do so. This is done through a central schema repository
        which holds all available XML schema files for a project.</para>
        
        <programlisting>&lt;bean id=&quot;schemaRepository&quot; 
         class=&quot;com.consol.citrus.xml.XsdSchemaRepository&quot;&gt;
    &lt;property name=&quot;schemas&quot;&gt;
        &lt;list&gt;
            &lt;bean class=&quot;org.springframework.xml.xsd.SimpleXsdSchema&quot;&gt;
                &lt;property name=&quot;xsd&quot; 
                     value=&quot;classpath:citrus/flightbooking/TravelAgencySchema.xsd&quot;/&gt;
            &lt;/bean&gt;
            &lt;bean class=&quot;org.springframework.xml.xsd.SimpleXsdSchema&quot;&gt;
                &lt;property name=&quot;xsd&quot; 
                     value=&quot;classpath:citrus/flightbooking/AirlineSchema.xsd&quot;/&gt;
            &lt;/bean&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting>
        
        <para>By convention the schema repository instance is defined in the Citrus Spring configuration with the id "schemaRepository".
        Spring is then able to inject this schema repository instance into every message receiving action. The receiving action receives 
        XML messages and will ask the repository for a matching schema definition file in order to validate the document structure.</para>
        
        <para>The connection between XML messages and xsd schema files is done with a mapping strategy which we will discuss later in this chapter. By default
        Citrus picks the right schema using the target namespace that is defined inside a schema definition. The target namespace of the schema definition has to
        match the namespace of the root element in the received XML message. Using this central schema repository you do not have to wire XML messages and schema 
        files together every time within your test. This is done automatically within the schema repository. All you need to do is defin all schema definition files inside
        the schema repository.</para>
        
        <important>
            <para>In case Citrus receives a classified XML message using namespaces Citrus will try to validate the structure of the message 
            by default. Consequently you will also get errors in case no matching schema definition file is found inside the schema 
            repository. So if you explicitly do not want to validate the XML schema for some reason you have to disable the validation
            explicitly in your test.</para>
            
            <programlisting>&lt;receive with=&quot;getCustomerRequestReceiver&quot;&gt;
    &lt;message schema-validation=&quot;false&quot;&gt;
        &lt;validate path=&quot;//ns2:RequestMessage/ns2:MessageHeader/ns2:RequestTag&quot; 
             value=&quot;${requestTag}&quot;/&gt;
        &lt;validate path=&quot;//ns2:RequestMessage/ns2:MessageHeader/ns2:CorrelationId&quot; 
             value=&quot;${correlationId}&quot;/&gt;
        &lt;namespace prefix=&quot;ns2&quot; value=&quot;http://citrus/default&quot;/&gt;
    &lt;/message&gt;
    &lt;header&gt;
        &lt;element name=&quot;Operation&quot; value=&quot;GetCustomer&quot;/&gt;
        &lt;element name=&quot;RequestTag&quot; value=&quot;${requestTag}&quot;/&gt;
    &lt;/header&gt;
&lt;/receive&gt;</programlisting>
            
            <para>This way might sound annoying for you but in our opinion it is very important to validate the structure of the received 
            XML messages, so disabling the schema validation should not be the standard for all tests. Disabling automatic schema validation
            should only apply to special situations.</para>
        </important>
    </section>
    
    <section id="schema-mapping-strategy">
        <title>Schema mapping strategy</title>
        
        <para>The schema repository in Citrus holds one to many schema definition files and dynamically picks up the right one according to the validated message payload.
        The repository needs to have some strategy for deciding which schema definition to choose. See the following schema mapping strategies and decide which of them is suitable
        for you.</para>
        
        <section id="target-namespace-strategy">
            <title>Target Namespace Mapping Strategy</title>
            
            <para>This is the default schema mapping strategy. Schema definitions usually define some target namespace which is valid for all elements and types inside the schema file.
            The target namespace is also used as root namespace in XML message payloads. According to this information Citrus can pick up the right schema definition file in the schema
            repository. You can set the schema mapping strategy as property in the configuration files:</para>
            
            <programlisting>&lt;bean id=&quot;schemaRepository&quot; 
         class=&quot;com.consol.citrus.xml.XsdSchemaRepository&quot;&gt;
    &lt;property name=&quot;schemaMappingStrategy&quot;&gt;
        &lt;bean class=&quot;com.consol.citrus.xml.schema.TargetNamespaceSchemaMappingStrategy&quot;/&gt;
    &lt;/property&gt;
    &lt;property name=&quot;schemas&quot;&gt;
        &lt;list&gt;
            &lt;bean class=&quot;org.springframework.xml.xsd.SimpleXsdSchema&quot;&gt;
                &lt;property name=&quot;xsd&quot; 
                     value=&quot;classpath:citrus/samples/sayHello.xsd&quot;/&gt;
            &lt;/bean&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting>

            <para>The <emphasis>sayHello.xsd</emphasis> schema file defines a target namespace (http://www.consol.de/schemas/samples/sayHello.xsd):</para>
            
            <programlisting>&lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;
     xmlns=&quot;http://www.consol.de/schemas/samples/sayHello.xsd&quot;
     targetNamespace=&quot;http://www.consol.de/schemas/samples/sayHello.xsd&quot;
     elementFormDefault=&quot;qualified&quot;
     attributeFormDefault=&quot;unqualified&quot;&gt;
     
&lt;/xs:schema&gt;</programlisting>

            <para>Incoming request messages should also have the target namespace set (xmlns=http://www.consol.de/schemas/samples/sayHello.xsd) and this is how Citrus matches
            the right schema file in the repository.</para>
            
            <programlisting>&lt;HelloRequest xmlns="http://www.consol.de/schemas/samples/sayHello.xsd"&gt;
   &lt;MessageId&gt;123456789&lt;/MessageId&gt;
   &lt;CorrelationId&gt;1000&lt;/CorrelationId&gt;
   &lt;User&gt;Christoph&lt;/User&gt;
   &lt;Text&gt;Hello Citrus&lt;/Text&gt;
&lt;/HelloRequest&gt;</programlisting>
        </section>
        
        <section id="root-qname-strategy">
            <title>Root QName Mapping Strategy</title>
            
            <para>The next possibility for mapping incoming request messages to a schema definition is via the XML root element QName. Each XML message
            payload starts with a root element that usually declares the type of a XML message. According to this root element you can set up mappings in the schema repository.</para>
            
            <programlisting>&lt;bean id=&quot;schemaRepository&quot; 
         class=&quot;com.consol.citrus.xml.XsdSchemaRepository&quot;&gt;
    &lt;property name=&quot;schemaMappingStrategy&quot;&gt;
        &lt;bean class=&quot;com.consol.citrus.xml.schema.RootQNameSchemaMappingStrategy&quot;&gt;
            &lt;property name=&quot;mappings&quot;&gt;
                &lt;map&gt;
                    &lt;entry key=&quot;HelloRequest&quot; value=&quot;helloSchema&quot;/&gt;
                    &lt;entry key=&quot;GoodbyeRequest&quot; value=&quot;goodbyeSchema&quot;/&gt;
                &lt;/map&gt;
            &lt;/property&gt;
        &lt;/bean&gt;
    &lt;/property&gt;
    &lt;property name=&quot;schemas&quot;&gt;
        &lt;list&gt;
            &gt;ref bean=&quot;helloSchema&quot;/&gt;
            &gt;ref bean=&quot;goodbyeSchema&quot;/&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;

&lt;bean id=&quot;helloSchema&quot; class=&quot;org.springframework.xml.xsd.SimpleXsdSchema&quot;&gt;
    &lt;property name=&quot;xsd&quot; 
         value=&quot;classpath:citrus/samples/sayHello.xsd&quot;/&gt;
&lt;/bean&gt;

&lt;bean id=&quot;goodbyeSchema&quot; class=&quot;org.springframework.xml.xsd.SimpleXsdSchema&quot;&gt;
    &lt;property name=&quot;xsd&quot; 
         value=&quot;classpath:citrus/samples/sayGoodbye.xsd&quot;/&gt;
&lt;/bean&gt;</programlisting>

            <para>The programlisting above defines two root qname mappings - one for <emphasis>HelloRequest</emphasis> and one for <emphasis>GoodbyeRequest</emphasis> message types.
            An incoming message of type &lt;HelloRequest&gt; is then mapped to the respective schema and so on. With this dedicated mappings you are able to control which schema is used on
            a XML request, regardless of target namespace definitions.</para>
        </section>
        
        <section id="schema-mapping-chain">
            <title>Schema mapping strategy chain</title>
            
            <para>Let's discuss the possibility to combine several schema mapping strategies in a logical chain. You can define more than one mapping strategy that are
            evaluated in sequence. The first strategy to find a proper schema definition file in the repository wins.</para>
            
            <programlisting>&lt;bean id=&quot;schemaRepository&quot; 
         class=&quot;com.consol.citrus.xml.XsdSchemaRepository&quot;&gt;
    &lt;property name=&quot;schemaMappingStrategy&quot;&gt;
        &lt;bean class=&quot;com.consol.citrus.xml.schema.SchemaMappingStrategyChain&quot;&gt;
            &lt;property name=&quot;strategies&quot;&gt;
                &lt;list&gt;
                    &lt;bean class=&quot;com.consol.citrus.xml.schema.RootQNameSchemaMappingStrategy&quot;&gt;
                        &lt;property name=&quot;mappings&quot;&gt;
                            &lt;map&gt;
                                &lt;entry key=&quot;HelloRequest&quot; value=&quot;helloSchema&quot;/&gt;
                            &lt;/map&gt;
                        &lt;/property&gt;
                    &lt;/bean&gt;
                    &lt;bean class=&quot;com.consol.citrus.xml.schema.TargetNamespaceSchemaMappingStrategy&quot;/&gt;                
                &lt;/list&gt;
            &lt;/property&gt;
        &lt;/bean&gt;
    &lt;/property&gt;
    &lt;property name=&quot;schemas&quot;&gt;
        &lt;list&gt;
            &gt;ref bean=&quot;helloSchema&quot;/&gt;
            &gt;ref bean=&quot;goodbyeSchema&quot;/&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting>

            <para>So the schema mapping chain uses both <emphasis>RootQNameSchemaMappingStrategy</emphasis> and <emphasis>TargetNamespaceSchemaMappingStrategy</emphasis> in combination.
            In case the first root qname strategy fails to find a proper mapping the next target namespace strategy comes in and tries to find a proper schema.</para>
        </section>
    </section>
    
    <section id="schema-definition-overrule">
        <title>Schema definition overruling</title>
        
        <para>Now it is time to talk about schema definition settings on test action level. We have learned before that Citrus tries to automatically find a matching schema definition
        in some schema repository. There comes a time where you as a tester just have to pick the right schema definition by yourself. You can overrule all schema mapping strategies in Citrus
        by directly setting the desired schema in your receiving message action.</para>
        
        <programlisting>&lt;receive with=&quot;getCustomerRequestReceiver&quot;&gt;
    &lt;message schema=&quot;helloSchema&quot;&gt;
        &lt;validate path=&quot;//ns2:RequestMessage/ns2:MessageHeader/ns2:RequestTag&quot; 
             value=&quot;${requestTag}&quot;/&gt;
        &lt;validate path=&quot;//ns2:RequestMessage/ns2:MessageHeader/ns2:CorrelationId&quot; 
             value=&quot;${correlationId}&quot;/&gt;
        &lt;namespace prefix=&quot;ns2&quot; value=&quot;http://citrus/default&quot;/&gt;
    &lt;/message&gt;
&lt;/receive&gt;

&lt;bean id=&quot;helloSchema&quot; class=&quot;org.springframework.xml.xsd.SimpleXsdSchema&quot;&gt;
    &lt;property name=&quot;xsd&quot; 
         value=&quot;classpath:citrus/samples/sayHello.xsd&quot;/&gt;
&lt;/bean&gt;</programlisting>

        <para>In the example above the tester explicitly sets a schema definition in the receive action (schema=&quot;helloSchema&quot;). The attribute value refers to named schema bean 
        somewhere in the applciation context. This overrules all schema mapping strategies used in the central schema repository as the given schema is directly used for validation. This feature 
        is helpful when dealing with different schema versions at the same time where the schema repository can not help you anymore.</para>
        
        <para>Another possibility would be to set a custom schema repository at this point. This means you can have more than one schema repository in your Citrus project 
        and you pick the right one by yourself in the receive action.</para>
        
        <programlisting>&lt;receive with=&quot;getCustomerRequestReceiver&quot;&gt;
    &lt;message schema-repository=&quot;mySpecialSchemaRepository&quot;&gt;
        &lt;validate path=&quot;//ns2:RequestMessage/ns2:MessageHeader/ns2:RequestTag&quot; 
             value=&quot;${requestTag}&quot;/&gt;
        &lt;validate path=&quot;//ns2:RequestMessage/ns2:MessageHeader/ns2:CorrelationId&quot; 
             value=&quot;${correlationId}&quot;/&gt;
        &lt;namespace prefix=&quot;ns2&quot; value=&quot;http://citrus/default&quot;/&gt;
    &lt;/message&gt;
&lt;/receive&gt;</programlisting>

        <para>The <emphasis>schema-repository</emphasis> attribute refers to a bean of type <emphasis>com.consol.citrus.xml.XsdSchemaRepository</emphasis> somewhere in the applicaiton context.</para>
        
        <important>
            <para>In case you have several schema repositories in your project do always define a default repository (name=&quot;schemaRepository&quot;). This helps Citrus to always find at least
            one repository to consult with.</para>
        </important>
    </section>
    
    <section id="dtd-validation">
        <title>DTD validation</title>
        
        <para>XML DTD (Document type definition) is another way to validate the structure of a XML document. Many people say that DTD is
        deprecated and XML schema is the much more efficient way to describe the rules of a XML structure. We do not disagree with that, but
        we also know that legacy systems might still use DTD. So in order to avoid validation errors we have to deal with DTD validation
        as well.</para>
        
        <para>First thing you can do about DTD validation is to specify an inline DTD in your expected message template.</para>
        
        <programlisting>&lt;receive with=&quot;getTestMessageReceiver&quot;&gt;
    &lt;message schema-validation=&quot;false&quot;&gt;
        &lt;data&gt;
        &lt;![CDATA[
            &lt;!DOCTYPE root [
                &lt;!ELEMENT root (message)&gt;
                &lt;!ELEMENT message (text)&gt;
                &lt;!ELEMENT text (#PCDATA)&gt;
                ]&gt;
            &lt;root&gt;
                &lt;message&gt;
                    &lt;text&gt;Hello TestFramework!&lt;/text&gt;
                &lt;/message&gt;
            &lt;/root&gt;
        ]]&gt;
        &lt;data/&gt;
    &lt;/message&gt;
&lt;/receive&gt;</programlisting>
        
        <para>The system under test may also send the message with a inline DTD definition. So validation will succeed.</para>
        
        <para>In most cases the DTD is referenced as external .dtd file resource. You can do this in your expected message 
        template as well.</para>
        
        <programlisting>&lt;receive with=&quot;getTestMessageReceiver&quot;&gt;
    &lt;message schema-validation=&quot;false&quot;&gt;
        &lt;data&gt;
        &lt;![CDATA[
            &lt;!DOCTYPE root SYSTEM 
                         &quot;com/consol/citrus/validation/example.dtd&quot;&gt;
            &lt;root&gt;
                &lt;message&gt;
                    &lt;text&gt;Hello TestFramework!&lt;/text&gt;
                &lt;/message&gt;
            &lt;/root&gt;
        ]]&gt;
        &lt;data/&gt;
    &lt;/message&gt;
&lt;/receive&gt;</programlisting>
    </section>
</chapter>