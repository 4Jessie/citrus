<?xml version="1.0" encoding="UTF-8"?>
<chapter id="testsuite">
    <title>Actions before/after the test run</title>

    <para>A test framework should also provide the functionality to do some work before and after the test run. You could think of 
    preparing/deleting the data in a database or starting/stopping a server in this section before/after a test run. These tasks fit 
    best into the initialization and cleanup phases of Citrus. All you have to do is add some Spring bean definitions to the Citrus 
    application context.</para>
    
    <section id="testsuite-before">
        <title>Before suite</title>
        
        <para>You can influence the behavior of a test run in the initialization phase actually before the tests are executed. 
        See the next code example to find out how it works with actions that take place before the first test is executed:</para>
        
        <programlisting>&lt;bean class=&quot;com.consol.citrus.container.SequenceBeforeSuite&quot;&gt;
      &lt;property name=&quot;actions&quot;&gt;
          &lt;list&gt;
              &lt;!-- list of actions before suite --&gt;
          &lt;/list&gt;
      &lt;/property&gt;
  &lt;/bean&gt;</programlisting>
  
        <programlisting>&lt;bean class=&quot;com.consol.citrus.container.SequenceBeforeSuite&quot;&gt;
      &lt;property name=&quot;actions&quot;&gt;
          &lt;list&gt;
              &lt;bean id=&quot;initDatabase&quot; class=&quot;com.consol.citrus.actions.ExecuteSQLAction&quot;&gt;
                  &lt;property name=&quot;dataSource&quot; ref=&quot;testDataSource&quot;/&gt;
                  &lt;property name=&quot;statements&quot;&gt;
                      &lt;list&gt;
                          &lt;value&gt;CREATE TABLE PERSON (ID integer, NAME char(250))&lt;/value&gt;
                      &lt;/list&gt;
                  &lt;/property&gt;
              &lt;/bean&gt;
          &lt;/list&gt;
      &lt;/property&gt;
  &lt;/bean&gt;</programlisting>
  
        <para>We access the database and create a table PERSON which is obviously needed in our test cases. You can think of several actions here to prepare the database for instance.</para>
  
        <tip>
            <para>Citrus offers special startup and shutdown actions that may start and stop server implementations automatically. This might 
            be helpful when dealing with Http servers or WebService containers like Jetty. You can also think of starting/stopping a 
            JMS broker before a test run.</para>
        </tip>
    </section>
    
    <section id="testsuite-after">
        <title>After suite</title>
        
        <para>A test run may require the test environment to be clean. Therefore it is a good idea to purge all JMS destinations
        or clean up the database after the test run in order to avoid errors in follow-up test runs. Just like we prepared some data in actions before suite we can clean up the test run 
        in actions after the tests are finished. The Spring bean syntax here is not significantly different to those in before suite section:</para>
        
        <programlisting>&lt;bean class=&quot;com.consol.citrus.container.SequenceAfterSuite&quot;&gt;
      &lt;property name=&quot;actions&quot;&gt;
          &lt;list&gt;
              &lt;!-- list of actions after suite --&gt;
          &lt;/list&gt;
      &lt;/property&gt;
  &lt;/bean&gt;</programlisting>
  
        <programlisting>&lt;bean class=&quot;com.consol.citrus.container.SequenceAfterSuite&quot;&gt;
      &lt;property name=&quot;actions&quot;&gt;
          &lt;list&gt;
              &lt;bean id=&quot;initDatabase&quot; class=&quot;com.consol.citrus.actions.ExecuteSQLAction&quot;&gt;
                  &lt;property name=&quot;dataSource&quot; ref=&quot;testDataSource&quot;/&gt;
                  &lt;property name=&quot;statements&quot;&gt;
                      &lt;list&gt;
                          &lt;value&gt;DELETE FROM TABLE PERSON&lt;/value&gt;
                      &lt;/list&gt;
                  &lt;/property&gt;
              &lt;/bean&gt;
          &lt;/list&gt;
      &lt;/property&gt;
  &lt;/bean&gt;</programlisting>
  
        <para>We just remove all data from the database so we do not influence follow-up tests. Quite simple isn't it!?</para>
    </section>
    
    <section id="testsuite-before-test">
        <title>Before test</title>
        
        <para>Before each test is executed it also might sound reasonable to purge all JMS queues for instance. In case a previous test fails some messages might be left in the JMS queues. 
        Also the database might be in dirty state. The follow-up test then will be confronted with these invalid messages and data. Purging all JMS destinations before a test is therefore a 
        good idea. Just like we prepared some data in actions before suite we can clean up the data before a test starts to execute.</para>
        
        <programlisting>&lt;bean class=&quot;com.consol.citrus.container.SequenceBeforeTest&quot;&gt;
      &lt;property name=&quot;actions&quot;&gt;
          &lt;list&gt;
              &lt;!-- list of actions before test --&gt;
          &lt;/list&gt;
      &lt;/property&gt;
  &lt;/bean&gt;</programlisting>
  
        <programlisting>&lt;bean class=&quot;com.consol.citrus.container.SequenceBeforeTest&quot;&gt;
      &lt;property name=&quot;actions&quot;&gt;
          &lt;list&gt;
              &lt;ref bean=&quot;purgeJmsQueues&quot;/&gt;
          &lt;/list&gt;
      &lt;/property&gt;
  &lt;/bean&gt;</programlisting>
    </section>
</chapter>