<?xml version="1.0" encoding="UTF-8"?>
<chapter id="whatsnew">
  <title>What's new?!</title>

  <para>The new Citrus release introduces new features and changes that we discuss in the following sections. We want you to get an overview of what has happened in the last release so you can
  identify the new stuff which is of interest for you.</para>
  
  <section id="whatsnew-javadsl">
    <title>Java DSL</title>

    <para>Citrus users, in particular those with development experience, do often tell me to not like the XML test definitions so much. They want to write Java code rather than XML. Although I personally
    do like the XML syntax when writing test cases we have introduced a Java DSL language for writing Citrus tests with Java only. Details can be seen in the code examples for all test actions 
    in <xref linkend="test-actions"/>.</para>
  </section>
  
  <section id="whatsnew-xhtml">
    <title>XHTML message validation</title>

    <para>Message validation for Html code was not really comfortable as Html does not confirm to be wellformed and valid XML syntax. XHTML tries to close this gap by automatically resolving all Html specific 
    XML syntax rule violations. With Citrus 1.3 we introduced a XHTML message validator which does the magic for converting Html code to proper wellformed and valid XML. In a test case you can then use
    the full XML validation power in Citrus in order to validate incoming Html messages. Section <xref linkend="xhtml"/> deals with the new validation capabilities for Html.</para>
  </section>
  
  <section id="whatsnew-soap-fault">
    <title>Multiple SOAP fault detail support</title>

    <para>SOAP fault messages can hold many SOAP fault detail elements. Citrus was able to handle SOAP fault details on sending and receiving test actions before, but only one single fault detail. Now you can 
    send and receive as many detail elements as you like. For each SOAP fault detail you can specify individual validation rules and expectations. See <xref linkend="soap-faults"/> for detailed description.</para>
  </section>
  
  <section id="whatsnew-actors">
    <title>Test actors</title>

    <para>We introduced a new concept of test actors for sending and receiving test actions. This enables you to link a test actor (e.g. interface partner application, backend application) to a test
    action in your test. Following from that you can enable/disable test actors and all linked test actions very easy. This enables us to reuse Citrus test cases in end-to-end test scenarios where
    not all interface partners get simulated by Citrus. If you like to read more about this concept follow the detailed instruction in <xref linkend="test-actors"/>.</para>
  </section>
  
  <section id="whatsnew-soap-http-errors">
    <title>Simulate Http error codes with SOAP</title>

    <para>In case Citrus provides SOAP WebServices as a server we can now simulate Http error codes like 404 Not found and 500 Internal server error. This was not possible before so the SOAP server always responsed
    with a proper SOAP response or SOAP fault. See <xref linkend="soap-http-errors"/> for details.</para>
  </section>
  
  <section id="whatsnew-ssh">
    <title>SSH server and client</title>

    <para>The Citrus family has raised a new member in adding SSH connectivity. With the new SSH module you are able to provide a full stack SSH server. The SSH server accepts client connections and you as a tester can simulate
    any SSH server functionality with proper validation as it is known to Citrus SOAP and HTTP modules. In addition to that you can also use the Citrus SSH client in order to connect to an external SSH server. You can execute 
    SSH commands on the SSH server and validate the respective response data. The full description is provided in <xref linkend="ssh"/>.</para>
  </section>
  
  <section id="whatsnew-antrun">
    <title>ANT run test action</title>
    
    <para>With this new test action you can call ANT builds from your test case. The action executes one or more ANT build targets on a build.xml file. You can specify build properties that get passed to the ANT build and 
    you can add a custom build listener. In case the ANT build run fails the test fails accordingly with the build exception. See <xref linkend="actions-antrun"/> for details.</para>
  </section>
  
  <section id="whatsnew-polling-interval">
    <title>Polling interval for reply handlers</title>
    
    <para>With synchronous communication in Citrus we always have a combination of a synchronous message sender and a reply handler component. These two perform a handshake when passing synchronous reply messages to the test
    for further processing such as message validation. While the sender is waiting for the synchronous response to arrive the reply handler polls for the reply message. This polling for reply messages was done in a static way 
    which often led to time delays according to long polling intervals. Now with Citrus 1.3 you can set the polling-interval for the reply handler as you like. This setting is
    valid for all reply handler components in Citrus (citrus-jms, citrus-http, citrus-ws, citrus-channel, citrus-shh, and so on).</para>
  </section>
  
  <section id="whatsnew-functions">
    <title>New functions</title>
    
    <para>Citrus provides several default functions that will ease the testers life. We continuously develop out of the box functions that you can use:</para>
    
    <itemizedlist>
        <listitem>Nothing yet!</listitem>
    </itemizedlist>
    
    <para>See <xref linkend="functions"/> for detail descriptions of each function.</para>
  </section>
  
  <section id="whatsnew-bugfixes">
    <title>Bugfixes</title>
    
    <para>Bug fixing is part of our daily business. Finding and solving issues makes Citrus better every day. For a detailed
    bugfix listing please refer to the complete changes log and JIRA.</para>
  </section>
  
  <section id="whatsnew-upgrading">
    <title>Upgrading from version 1.2</title>
    
    <para>If you are coming from Citrus 1.2 you may have to look at the following points in order to have a smooth upgrade to the latest release version.</para>
    
    <itemizedlist mark="opencircle">
        <listitem>
            <para><emphasis>Jetty version upgrade</emphasis> We are using Jetty a lot for starting Http server mocks within Citrus. In order to stay up to date we upgraded to
            Jetty 8.1.7 version with this Citrus release. This implies that package names did change for Jetty API. In general there is no conflict for you as a Citrus user, but you may want to
            adjust your logging configuration according to new Jetty packages. Jetty package names did change from <emphasis>ord.mortbay</emphasis> to <emphasis>org.eclipse.jetty</emphasis>.</para>
        </listitem>
        <listitem>
            <para><emphasis>Spring version upgrade</emphasis> Staying up to date with the versions of 3rd library dependencies is quite important for us. So we upgrade our dependencies to newer versions
            with each release. As we did only upgrade minor versions there is no significant change or problems to be expected. However you may take care on versions and 
            release changes in the Spring world for details and migration.</para>
        </listitem>
    </itemizedlist>
  </section>
</chapter>