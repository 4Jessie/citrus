<?xml version="1.0" encoding="UTF-8"?>
<chapter id="run-config">
    <title>Running tests</title>

    <para>Citrus test cases are nothing but Java classes that get executed within a Java runtime environment. Each Citrus test therefore relates 
    to a Java class representing a JUnit or TestNG unit test. As optional add on a Citrus test can have a XML test declaration file. This is for 
    those of you that do not want to code Java. In this case the XML part holds all actions to tell Citrus what should happen in the test case. 
    The Java part will then just be responsible for test execution and is not likely to be changed at all. In the following sections we concentrate 
    on the Java part and the test execution mechanism.</para>
    
    <para>If you create new test cases in Citrus - for instance via Maven plugin or ANT build script - Citrus 
    generates both parts in your test directory. For example: if you create a new test named 
    <emphasis>MyFirstCitrusTest</emphasis> you will find these two files as a result:</para>
    
    <para><literal>src/citrus/tests/com/consol/citrus/MyFirstCitrusTest.xml</literal></para>
    <para><literal>src/citrus/java/com/consol/citrus/MyFirstCitrusTest.java</literal></para>

    <note>
        <para>If you prefer to just write Java code you can throw away the XML part immediately and continue working with the Java part only. In case
        you are familiar with writing Java code you may just skip the test template generation via Maven or ANT and preferably just create new Citrus Java 
        test classes on your own.</para>
    </note>
    
    <para>With the creation of this test we have already made a very important decision. During creation, Citrus asks 
    you which execution framework should be used for this test. There are basically three options available: 
    <literal>testng</literal>, <literal>junit3</literal> and <literal>junit4</literal>.</para>
    
    <para>So why is Citrus related to Unit tests although it is intended to be a framework for integration testing? 
    The answer to this question is quite simple: This is because Citrus wants to benefit from both JUnit and TestNG for 
    Java test execution. Both the JUnit and TestNG Java APIs offer various ways of execution and both frameworks are widely supported 
    by other tools (e.g. continuous build, build lifecycle, development IDE).</para>
    
    <para>Users might already know one of these frameworks and the chances are good that they are familiar with at least one of them. 
    Everything you can do with JUnit and TestNG test cases you can do with Citrus tests also. Include them into your Maven build 
    lifecycle. Execute tests from your IDE (Eclipse, IDEA or NetBeans). Include them into a continuous build tool (e.g. Jenkins,
    Bamboo or Hudson). Generate test execution reports and test coverage reports with Sonar, Cobertura and so on. The possibilities with JUnit and TestNG are 
    amazing.</para>

    <para>So let us have a closer look at the Citrus TestNG and JUnit integration.</para>
    
    <section id="run-config-testng">
        <title>Run with TestNG</title>
        
        <para>TestNG stands for next generation testing and has had a great influence in adding Java annotations to the unit
        test community. Citrus is able to generate TestNG Java classes that are executable as test cases. See the following standard
        template that Citrus will generate when having new test cases:</para>
        
        <programlisting language="java">
  package com.consol.citrus.samples;

  import org.testng.annotations.Test;

  import com.consol.citrus.annotations.CitrusXmlTest;
  import com.consol.citrus.testng.AbstractTestNGCitrusTest;
    
  /**
   * TODO: Description
   *
   * @author Unknown
   * @since 2010-06-05
   */
  @Test
  public class SampleTest extends AbstractTestNGCitrusTest {
      @CitrusXmlTest(names = "SampleTest")
      public void sampleTest() {}
  }
        </programlisting>
        
        <para>If you are familiar with TestNG you will see that the generated Java class is nothing but a normal TestNG test class.
        The good news is that we can still use the fantastic TestNG features in our test. You can think of parallel test execution, test groups, 
        setup and tear down operations and many more. Just to give an example we can simply add a test group to our test like this:</para>
        
        <para><literal>@Test(groups = {"long-running"})</literal></para>
        
        <para>For more information on TestNG please visit the official homepage, where you find complete reference documentation.</para>

        <para>Now we also use the @CitrusXmlTest annotation in the Java class. This annotation makes Citrus search for a XML file that represents
        the Citrus test within your classpath. The default naming convention requires a XML file with the tests name in the same package that the
        Java class is placed in. In the basic example above this means that Citrus searches for a XML test file in
        <emphasis>com/consol/citrus/samples/SampleTest.xml</emphasis>. You tell Citrus to search for another XML file by using the @CitrusXmlTest
        annotation properties. Following annotation properties are valid:</para>

        <itemizedlist mark="opencircle">
          <listitem>
            <para>names: List of test case names to execute. Names also define XML file names to look for (<emphasis>.xml</emphasis> file extension
            is not needed here).</para>
          </listitem>
          <listitem>
            <para>packageName: Custom package location for the XML files to load</para>
          </listitem>
          <listitem>
            <para>packagesToScan: List of packages that are automatically scanned for XML test files to execute. For each XML file found separate
            test is executed. Note that this performs a Java Classpath package scan so all XML files in package are assumed to be valid Citrus XML
            test cases. In order to minimize the amount of accidentally loaded XML files the scan will only load XML files with
            <emphasis>**/*Test.xml</emphasis> file name pattern.</para>
          </listitem>
        </itemizedlist>

        <para>You can also mix the various CitrusXmlTest annotation patterns in a single Java class. So we are able to have several test cases in one
        single Java class. Each annotated method represents one or more Citrus XML test cases. Se the following example to see what this is about.</para>

        <programlisting>@Test
public class SampleTest extends AbstractTestNGCitrusTest {
    @CitrusXmlTest(names = "SampleTest")
    public void sampleTest() {}

    @CitrusXmlTest(names = { "SampleTest", "Sample2Test" })
    public void multipleTests() {}

    @CitrusXmlTest(names = "OtherTest", packageName = "com.other.testpackage")
    public void sampleTest() {}

    @CitrusXmlTest(packagesToScan =  { "com.some.testpackage", "com.other.testpackage" })
    public void sampleTest() {}
}</programlisting>

      <para>You are free to combine these test annotations as you like. As the whole Java class is annotated with the TestNG
      <emphasis>@Test</emphasis> annotation each method gets executed automatically. Citrus will also take care on executing each XML test case as
      a separate unit test. So the test reports will have the exact number of executed tests and the JUnit/TestNG test reports do have the exact test
      outline for further usage (e.g. in continuous build reports).</para>

      <note>
        <para>When test execution takes place each test method annotation is evaluated in sequence. XML test cases that match several times, for instance by
        explicit name reference and a package scan will be executed several times respectively.</para>
      </note>

      <para>The best thing about using the <emphasis>@CitrusXmlTest</emphasis> annotation is that you can continue to use the fabulous TestNG
      capabilities (e.g. test groups, invocation count, thread pools, data providers, and so on).</para>
    </section> 
    
    <section id="run-config-junit">
        <title>Run with JUnit</title>
        
        <para>JUnit is a very popular unit test framework for Java applications widely accepted and widely supported by many tools and frameworks. 
        Citrus offers complete JUnit support for both major versions 3.x and 4.x. If you choose <emphasis>junit3</emphasis> as execution framework 
        Citrus generates a Java file that looks like this:</para>
        
        <programlisting language="java">
  package com.vodafone.uc.il.itest.service;

  import com.consol.citrus.junit.AbstractJUnit38CitrusTest;
  
  /**
   * TODO: Description
   *
   * @author Unknown
   * @since 2010-06-05
   */
  public class JUnit3SampleTest extends AbstractJUnit38CitrusTest {
      public void testSampleTest() {
          executeTest();
      }
  }      
        </programlisting>
        
        <para>For <emphasis>junit4</emphasis> the respective file looks like this:</para>
        
        <programlisting language="java">
  package com.vodafone.uc.il.itest.service;

  import org.junit.Test;
  import com.consol.citrus.junit.AbstractJUnit4CitrusTest;
  
  /**
   * TODO: Description
   *
   * @author Unknown
   * @since 2010-06-10
   */
  public class SampleTest extends AbstractJUnit4CitrusTest {
      @Test
      public void sampleTest() {
          executeTest();
      }
  }
        </programlisting>
        
        <para>The different JUnit versions reveal slight differences, but the idea is the same. We are still
        able to extend the generated Java files with JUnit features. These Java files are responsible for 
        executing the Citrus test cases. For detailed information about JUnit and the fantastic ways to include
        those tests into your project please visit the official JUnit homepage.</para>
        
        <tip>
            <para>So now we know both TestNG and JUnit support in Citrus. Which framework should someone choose?
            To be honest, there is no easy answer to this question. The basic features are equivalent,
            but TestNG offers better possibilities for designing more complex test setup with test groups and 
            tasks before and after a group of tests. This is why TestNG is the default option in Citrus. But in 
            the end you have to decide on your own which framework fits best for your project.</para>
        </tip>
    </section>
</chapter>
