<?xml version="1.0" encoding="UTF-8"?>
<chapter id="http">
    <title>Http support</title>

    <para>Citrus is able to connect with Http services and simulate RESTful WebServices servers. In the next sections you will learn
    how to invoke Http services and how to handle REST Http requests in a test case. We deal with setting up a Http server in order to
    accept client requests and provide proper Http responses with GET, PUT, DELETE or POST request method.</para>
    
    <note>
        <para>Similar to the JMS specific configuration schema, Citrus provides a customized Http configuration schema that
        is used in Spring configuration files. Simply include the http-config namespace in the configuration XML files as follows.</para>
        
        <programlisting>&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
   xmlns:citrus=&quot;http://www.citrusframework.org/schema/config&quot;
   xmlns:citrus-http=&quot;http://www.citrusframework.org/schema/http/config&quot;
   xsi:schemaLocation=&quot;
   http://www.springframework.org/schema/beans 
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.citrusframework.org/schema/config 
   http://www.citrusframework.org/schema/config/citrus-config.xsd
   http://www.citrusframework.org/schema/http/config 
   http://www.citrusframework.org/schema/http/config/citrus-http-config.xsd&quot;&gt;
       
    [...]
    
&lt;/beans&gt;</programlisting>
        
        <para>Now you are ready to use the customized Http configuration elements with the 
        citrus-http namespace prefix.</para>
    </note>
    
    <section id="http-sender">
        <title>Http message sender</title>
        
        <para>Citrus is able to invoke a Http service as client waiting for the response message from server. After that the response message goes 
        through the validation process as usual. Let us see how a message sender for Http works:</para>
        
        <programlisting>&lt;citrus-http:message-sender id=&quot;httpMessageSender&quot; 
                               request-url=&quot;http://localhost:8090/test&quot; 
                               request-method=&quot;POST&quot;
                               content-type=&quot;application/xml&quot;
                               reply-handler=&quot;httpResponseHandler&quot;/&gt;

&lt;citrus-http:reply-message-handler id=&quot;httpResponseHandler&quot;/&gt;</programlisting>
        
        <para>As Http communication is always synchronous we need a reply message handler in combination with the Http message-sender. It is not
        very surprising that the sender also needs the <emphasis>request-url</emphasis> and a <emphasis>request-method</emphasis> as parameter. In addition
        to that we can specify the content-type of the request we are about to send. The message sender builds the Http request and sends it to the Http server. 
        The Http response is then provided to the reply handler as soon as it has arrived.</para>
        
        <tip><para>Citrus uses Spring's REST template mechanism for sedning Http requests. This means you have great customizing opportunities with a special REST 
        template configuration. You can think of basic Http authentication, read timeouts and special message factory implementations. Just use the custom REST template
        attribute in message sender like this:</para>
        
        <programlisting>&lt;citrus-http:message-sender id=&quot;httpMessageSender&quot; 
                               request-url=&quot;http://localhost:8090/test&quot; 
                               request-method=&quot;POST&quot;
                               content-type=&quot;text/plain&quot;
                               rest-template=&quot;customizedRestTemplate&quot;
                               reply-handler=&quot;httpResponseHandler&quot;/&gt;
                               
  &lt;!-- Customized rest template --&gt;
  &lt;bean name=&quot;customizedRestTemplate&quot; class=&quot;org.springframework.web.client.RestTemplate&quot;&gt;
    &lt;property name=&quot;messageConverters&quot;&gt;
      &lt;util:list id=&quot;converter&quot;&gt;
        &lt;bean class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;
          &lt;property name=&quot;supportedMediaTypes&quot;&gt;
            &lt;util:list id=&quot;types&quot;&gt;
              &lt;value&gt;text/plain&lt;/value&gt;
            &lt;/util:list&gt;
          &lt;/property&gt;
        &lt;/bean&gt;
      &lt;/util:list&gt;
    &lt;/property&gt;
    &lt;property name=&quot;errorHandler&quot;&gt;
      &lt;!-- Custom error handler --&gt;
    &lt;/property&gt;
    &lt;property name=&quot;requestFactory&quot;&gt;
      &lt;bean class=&quot;org.springframework.http.client.CommonsClientHttpRequestFactory&quot;&gt;
        &lt;property name=&quot;readTimeout&quot; value=&quot;9000&quot; /&gt;
      &lt;/bean&gt;
    &lt;/property&gt;
  &lt;/bean&gt;
        </programlisting>
        </tip>
    </section>
    
    <section id="http-server">
        <title>Http server</title>
        
        <para>Sending Http messages was quite easy and straight forward. Receiving Http messages is a little bit more complicated, because Citrus 
        has to provide server functionality listening on a local port for client connections. Once a client connection 
        is accepted the Http server must also provide a proper Http response to the client. Citrus ships with an embedded Http server, which is a preconfigured Jetty  
        server instance with Spring web application context support.</para>
        
        <programlisting>&lt;citrus-http:server id=&quot;sinpleHttpServer&quot; 
                port=&quot;8090&quot;
                auto-start=&quot;true&quot;
                context-config-location=&quot;classpath:com/consol/citrus/http/citrus-servlet-context.xml&quot;
                resource-base=&quot;src/citrus/resources&quot;/&gt;
        </programlisting>
        
        <para>The Http Jetty server will automatically start when the Spring application context is loaded (auto-start=&quot;true&quot;). The basic connector is listening on
        port 8090 for requests. The server automatically uses Spring application context loading on startup. The servlet context file is specified via classpath and hold all custom
        configurations for the server. Here is a sample servlet context with some basic Spring MVC components and the central HttpMessageController which is responsible for handling
        incoming requests (GET, PUT, DELETE, POST, etc.).</para>
        
        <programlisting>&lt;bean class=&quot;org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping&quot;/&gt;
  
  &lt;bean class=&quot;org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter&quot;&gt;
    &lt;property name=&quot;messageConverters&quot;&gt;
      &lt;util:list id=&quot;converters&quot;&gt;
        &lt;bean class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;
          &lt;property name=&quot;supportedMediaTypes&quot;&gt;
            &lt;util:list&gt;
              &lt;value&gt;text/xml&lt;/value&gt;
            &lt;/util:list&gt;
          &lt;/property&gt;
        &lt;/bean&gt;
      &lt;/util:list&gt;
    &lt;/property&gt;
  &lt;/bean&gt;
        
  &lt;bean class=&quot;com.consol.citrus.http.controller.HttpMessageController&quot;&gt;
    &lt;property name=&quot;messageHandler&quot;&gt;
        &lt;bean id=&quot;emptyResponseProducingMessageHandler&quot; 
         class=&quot;com.consol.citrus.http.handler.EmptyResponseProducingMessageHandler&quot;/&gt;        
    &lt;/property&gt;
  &lt;/bean&gt;
        </programlisting>
        
        <para>The beans above are responsible for proper Http server configuration. In general you do not need to adjust those beans, but we have the possibility to do so which gives 
        us a great customization and extension points. The important part is the message handler definition inside the HttpMessageController. Once a client request was accepted the 
        message handler is responsible for generating a proper response to the client.</para>
        
        <mediaobject>
          <imageobject role="fo">
            <imagedata align="center" display="block" fileref="figure_009.jpg" format="JPG" />
          </imageobject>
          
          <imageobject role="html">
            <imagedata align="center" display="block" fileref="figure_009.jpg" format="JPG" />
          </imageobject>
        </mediaobject>
        
        <para>Citrus provides several message handler implementations for different simulation strategies. With these message handler implementations you should be able to generate
        proper response messages for the client in a test case. Let's have a look at them in the following sections.</para>
        
        <section id="http-message-handler-empty">
            <title>Empty response producing message handler</title>
            
            <para>This is the simplest message handler you can think of. It simply provides an empty success response using the Http
            response code 202. In the introducing example this message handler was used to provide response messages to the calling client.
            The handler does not need any configurations or properties as it simply responds with an empty Http response.</para>
            
            <programlisting>&lt;bean id=&quot;emptyResponseProducingMessageHandler&quot; 
  class=&quot;com.consol.citrus.http.handler.EmptyResponseProducingMessageHandler&quot;/&gt;</programlisting>
        </section>
        
        <section id="http-message-handler-static">
            <title>Static response producing message handler</title>
            
            <para>The next more complex message handler will always return a static response message</para>
            
            <programlisting>&lt;bean 
  class=&quot;com.consol.citrus.adapter.handler.StaticResponseProducingMessageHandler&quot;&gt;
    &lt;property name=&quot;messagePayload&quot;&gt;
        &lt;value&gt;
        &lt;![CDATA[
            &lt;ns0:Response 
                xmlns:ns0=&quot;http://www.consol.de/schemas/samples/sample.xsd&quot;&gt;
                &lt;ns0:MessageId&gt;123456789&lt;/ns0:MessageId&gt;
                &lt;ns0:CorrelationId&gt;CORR123456789&lt;/ns0:CorrelationId&gt;
                &lt;ns0:Text&gt;Hello User&lt;/ns0:Text&gt;
            &lt;/ns0:Response&gt;
        ]]&gt;
        &lt;/value&gt;
    &lt;/property&gt;
    &lt;property name=&quot;messageHeader&quot;&gt;
      &lt;map&gt;
        &lt;entry key=&quot;{http://www.consol.de/schemas/samples}ns0:Operation&quot; 
                  value=&quot;sayHelloResponse&quot;/&gt;
        &lt;entry key=&quot;{http://www.consol.de/schemas/samples}ns0:Request&quot; 
                  value=&quot;HelloRequest&quot;/&gt;
      &lt;/map&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting>
            
            <para>The handler is configured with a static message payload and static response header values. The response to the client
            is therefore always identical.</para>
        </section>
        
        <section id="http-message-handler-xpath">
            <title>Xpath dispatching message handler</title>
            
            <para>The idea behind the xpath-dispatching-message-handler is that the incoming requests are dispatched to several
            message handlers according to an element value inside the message payload. The XPath expression will evaluate and
            call the respective message handler. The message handler mapping is done by their names inside a message handler Spring
            configuration context. The separate context is loaded in advance.</para>
            
            <programlisting>&lt;bean id=&quot;xpathDispatchingHandler&quot; 
  class=&quot;com.consol.citrus.http.handler.XpathDispatchingMessageHandler&quot;&gt;
    &lt;property name=&quot;xpathMappingExpression&quot; value=&quot;//MessageBody/Operation&quot;/&gt;
    &lt;property name=&quot;messageHandlerContext&quot; value=&quot;message-handler-context.xml&quot;/&gt;
&lt;/bean&gt;</programlisting>
            
            <para>The handler receives a XPath mapping expression as well as a Spring ApllicationContext file resource. The message handlers
            are mapped to the different values via their names. For instance a incoming request with 
            <literal>//MessageBody/Operation = "getOrders"</literal> is handled by the message handler named "getOrders". The available message handlers
            are configured in the message-handler-context (e.g. EmptyResponseProducingMessageHandler, StaticResponseProducingMessageHandler, ...).</para>
        </section>
        
        <section id="http-message-handler-jms">
            <title>JMS connecting message handler</title>
            
            <para>The most powerful message handler is the JMS connecting message handler. Indeed this handler also provides the most 
            flexibility. This handler will forward incoming request to a JMS destination and waiting for a proper response on a reply destination. 
            A configured JMS message receiver can read this forwarded request internally over JMS and provide a proper response on the 
            reply destination.</para>
            
            <programlisting>&lt;bean id=&quot;jmsForwardingMessageHandler&quot; 
         class=&quot;com.consol.citrus.http.handler.JmsConnectingMessageHandler&quot;&gt;
    &lt;property name=&quot;destinationName&quot; value=&quot;JMS.Queue.Requests.In&quot;/&gt;
    &lt;property name=&quot;replyDestinationName&quot; value=&quot;JMS.Queue.Response.Out&quot;/&gt;
    &lt;property name=&quot;connectionFactory&quot;&gt;
        &lt;bean class=&quot;org.apache.activemq.ActiveMQConnectionFactory&quot;&gt;
            &lt;property name=&quot;brokerURL&quot; value=&quot;tcp://localhost:61616&quot; /&gt;
        &lt;/bean&gt;
    &lt;/property&gt;
    &lt;property name=&quot;replyTimeout&quot; value=&quot;2000&quot;/&gt;
&lt;/bean&gt;</programlisting>
            
            <tip>
                <para>The samples section may help you get in touch with the http configuration and the JMS forwarding stategy 
                (<xref linkend="samples"/>)</para>
            </tip>
        </section>
    </section>    
</chapter>