<?xml version="1.0" encoding="UTF-8"?>
<chapter id="changes-new">
  <title>What's new?!</title>

  <para>In the following sections we shortly describe the Citrus evolution. We want you to get a
  quick overview of what has happened and all the new things in Citrus. So hopefully you can spot your favorite new
  feature.</para>

  <section id ="new-1-4">
    <title>Changes in Citrus 1.4</title>

    <section id="new-1-4-refactoring">
      <title>Refactoring</title>

      <para>It was time for us to do some code refactoring in Citrus. Many users struggled with the configuration
      of the Citrus components and project setup was too verbose in some areas. This is why we tried to improve things
      with working over the basic concepts and components in Citrus.</para>

      <para>The outcome is a new Citrus 1.4 which has new configuration components for sending and receiving messages. Also the
        client and server components for HTTP and SOAP have changed in terms of simplification of configuration. Unfortunately
        refactoring comes along with code deprecation. This is why you may have to change your project configuration in the future when
        you are coming from Citrus 1.3.x and earlier versions.</para>

      <para>The good news now is that with Citrus 1.4 both old and new configuration works fine, so you do not have to change your
        existing project configuration immediately. Have a look at what has been marked as deprecated in Citrus 1.4 and what has
        changed in configuration.</para>

      <para>We have set up a migration sheet for users coming from Citrus 1.3.x and earlier versions in order to find a quick overview
        of what has changed and how to use the new configuration components: <ulink url="http://citrusframework.org/migration-sheet.html">Citrus 1.4 migration-sheet</ulink></para>
    </section>

    <section id="new-1-4-data-dictionary">
      <title>Data dictionaries</title>

      <para>Data dictionaries define dynamic placeholders for message payload element values in general manner. In terms of
        setting the same message element across all test cases and all test actions the dictionary provides an easy key-value
        approach.</para>

      <para>When dealing with any kind of message payload Citrus will ask the data dictionary for possible translation of
        the message elements contained. The dictionary keys do match to a specific message element defined by XPath expression
        or document path expression for instance. The respective value is then set on all messages in Citrus (inbound and outbound).</para>

      <para>Dictionaries do apply to XML or JSON message data and can be defined in global or specific scope. Find out more detailed
      information about this topic in <xref linkend="data-dictionary"/></para>
    </section>

    <section id="new-1-4-mail">
      <title>Mail adapter</title>

      <para>With the new mail adapter you are able to both send and receive mail messages within a test case. The new Citrus
        mail client produces a mail mime part message with usual mail headers and a text body part. Optional attachment parts are
        supported, too.</para>

      <para>On the server side Citrus provides a SMTP server to accept client mail messages. The incoming mail messages can have
        multiple text parts and attachment parts. As usual you can validate the incoming mail messages regarding headers and payload
        with the well known validation capabilities in Citrus.</para>

      <para>Read more about the new mail module in <xref linkend="mail"/></para>
    </section>

    <section id="new-1-4-global-variables">
      <title>Global variables component</title>

      <para>We added a global variables XML configuration component for more comfortable usage in basic Spring application context
        configuration. Find out how to us it in <xref linkend="testcase-global-variables"/></para>
    </section>

    <section id="new-1-4-json-validator-mode">
      <title>Json text validator mode</title>

      <para>The Json text validator is now able to operate in two different modes. The strict mode is the default known comparison which
        includes also the check on all subobjects and array elements. Sometimes it may be accurate to only validate a subset of all Json
        objects in the structure. Therefore the non-strict mode is loose and does not check on subelement counts. See more description
        in <xref linkend="validation-json"/></para>
    </section>

    <section id="new-1-4-http-options">
      <title>HTTP REST specific Java DSL options</title>

      <para>When sending and receiving HTTP messages on REST APIs you can now use interface specific options in the Java DSL. This refers to
        request uri, context path, query parameters and HTTP status codes. With this enhancement you are now more comfortable in handling REST API calls in Citrus.
        Find out how to us it in <xref linkend="http"/></para>
    </section>

    <section id="new-1-4-soap-http-uri">
      <title>SOAP HTTP validation</title>

      <para>While receiving SOAP messages over HTTP we are now able to also verify the used HTTP uri, context-path and query parameters. You can expect clients to
        use those values in your receive action as you would do in normal HTTP communication within Citrus. This completes the HTTP server
        validation when using SOAP over HTTP. Read more about it in <xref linkend="soap-webservices"/></para>
    </section>

  </section>

  <section id="new-bugfixes">
    <title>Bugfixes</title>
    
    <para>Bugs are part of our software developers world and fixing them is part of your daily business, too. Finding and solving issues
      makes Citrus better every day. For a detailed listing of all bugfixes please refer to the complete changes log of each release in
      JIRA (<ulink url="https://citrusframework.atlassian.net/secure/ReleaseNote.jspa?projectId=10000&amp;version=10003">https://citrusframework.atlassian.net</ulink>).</para>
  </section>

</chapter>