<?xml version="1.0" encoding="UTF-8"?>
<chapter id="finally">
    <title>Finally section</title>

    <para>This chapter deals with a special section inside the test case that is executed even in case errors
    did occur during the test. Lets say you have started a Jetty web server instance at the beginning of the 
    test case and you need to shutdown the server when the test has finished its work. Or as a second example
    imagine that you have prepared some data inside the database at the beginning of your test and 
    you want to make sure that the data is cleaned up at the end of the test case.</para>
    
    <para>In both situations we might run into some problems when the test failed. 
    We face the problem that the whole test case will terminate immediately in case of errors. Cleanup tasks 
    at the end of the test action chain may not be executed correctly.</para>
    
    <para>Dirty states inside the database or still running server instances then might cause problems for 
    following test cases. To avoid this problems you should use the finally block of the test case. The &lt;finally&gt; 
    section contains actions that are executed even in case the test fails. Using this strategy the database 
    cleaning tasks mentioned before will find execution in every case (success or failure).</para>
    
    <para>The following example shows how to use the finally section at the end of a test:</para>
  
    <para><emphasis>XML DSL</emphasis></para>
    <programlisting>&lt;testcase name=&quot;finallyTest&quot;&gt;
    &lt;variables&gt;
        &lt;variable name=&quot;orderId&quot; value=&quot;citrus:randomNumber(5)&quot;/&gt;
        &lt;variable name=&quot;date&quot; value=&quot;citrus:currentDate('dd.MM.yyyy')&quot;/&gt;
    &lt;/variables&gt;
    &lt;actions&gt;
        &lt;sql datasource=&quot;testDataSource&quot;&gt;
            &lt;statement&gt;
                INSERT INTO ORDERS VALUES (${orderId}, 1, 1, '${date}')
            &lt;/statement&gt;
        &lt;/sql&gt;
        
        &lt;echo&gt;
            &lt;message&gt;
                ORDER creation time: ${date}
            &lt;/message&gt;
        &lt;/echo&gt;
    &lt;/actions&gt;
    &lt;finally&gt;
        &lt;sql datasource=&quot;testDataSource&quot;&gt;
            &lt;statement&gt;
              DELETE FROM ORDERS WHERE ORDER_ID='${orderId}'
            &lt;/statement&gt;
        &lt;/sql&gt;
    &lt;/finally&gt;
&lt;/testcase&gt;</programlisting>
    
    <para>In the example the first action creates an entry in the database using an <literal>INSERT</literal> statement. 
    To be sure that the entry in the database is deleted after the test, the finally section contains the respective 
    <literal>DELETE</literal> statement that is always executed regardless the test case state (successful or failed).</para>
    
    <para>Of course you can also use the finally block in the Java test case DSL. Find following example to see how it works:</para>
    
    <para><emphasis>Java DSL</emphasis></para>
    <programlisting language="java">protected void configure() {
    variable("orderId", "citrus:randomNumber(5)");
    variable("date", "citrus:currentDate('dd.MM.yyyy')");

    sql(dataSource)
        .statement("INSERT INTO ORDERS VALUES (${orderId}, 1, 1, '${date}')");
    
    echo("ORDER creation time: citrus:currentDate('dd.MM.yyyy')");
    
    doFinally(
        sql(dataSource).statement("DELETE FROM ORDERS WHERE ORDER_ID='${orderId}'")
    );
}</programlisting>

    <note>Java developers might ask why not use try-finally Java block instead? The answer is simple yet very important to understand. The configure method
    is called by the Java DSL test case builder not at test runtime but before that. This means that a try-finally block within the configure() method will never 
    perform the finally during the test run. Only adding the finally section as part of the test case with doFinally() will result in expected behavior.</note>
    
</chapter>