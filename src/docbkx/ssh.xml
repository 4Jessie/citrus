<?xml version="1.0" encoding="UTF-8"?>
<chapter id="ssh">
    <title>SSH support</title>

    <para>In the spirit of other Citrus mock services, there is support for simulating an external SSH server as well
    for connecting to SSH servers as an action during a test. SSH requests and responses are translated to
    simple XML documents which can be validated and generated with the common Citrus mechanism. A real SSH daemon
    can be fired up, taking a SSH EXEC request and translated it into a message of the following format:</para>

    <programlisting>&lt;ssh-request&gt;
  &lt;command&gt;cat - | sed -e 's/Hello/Hello SSH/'&lt;/command&gt;
  &lt;stdin&gt;Hello World&lt;/stdin&gt;
&lt;/ssh-request&gt;</programlisting>

    <para>This message can be validated with the usual Citrus mechanism. The message handler associated 
    with the server needs to provide an appropriate answer in the following format:</para>

    <programlisting>&lt;ssh-response&gt;
  &lt;stdout&gt;Hello SSH World&lt;/stdout&gt;
  &lt;stderr&gt;&lt;/stderr&gt;
  &lt;exit&gt;0&lt;/exit&gt;
&lt;/ssh-response&gt;</programlisting>

    <para>Beside simulating a full featured SSH server, Citrus also provides an SSH client. This client 
    uses the same request message pattern, which is translated into a real SSH call to an SSH server. 
    The SSH response received is tranlated into a response message as shown above.</para>

    <para>Both, SSH server and client along with their configuration options are described in the following 
    two sections. Examples and usage patterns can be found in the integration tests for Citrus itself.</para>

    <section id="ssh-server">
      <title>SSH Server</title>
      
      <para>Similar to the other Citrus backend systems, a Citrus SSH server and client is configured in Citrus' 
      Spring context. For the configuration, a dedicated <emphasis>ssh</emphasis> namespace is available. 
      A namespace declaration can be put into the context's top-level element:</para>

      <programlisting>&lt;beans 
    [...]
    xmlns:citrus-ssh=&quot;http://www.citrusframework.org/schema/ssh/config&quot;
    [...]
    xsi:schemaLocation=&quot;
        [...]
        http://www.citrusframework.org/schema/ssh/config
        http://www.citrusframework.org/schema/ssh/config/citrus-ssh-config.xsd
        [...] &quot;&gt;
   [...]
&lt;/beans&gt;</programlisting>
    
    <para>Given the above namespace declaration, adding an SSH-Server is quite simple:</para>
    
    <programlisting>&lt;citrus-ssh:server id=&quot;sshServer&quot;
             allowed-key-path=&quot;classpath:com/consol/citrus/ssh/test_user_pub.pem&quot;
             user=&quot;roland&quot;
             port=&quot;9072&quot;
             auto-start=&quot;true&quot;
             message-handler-ref=&quot;sshMessageHandler&quot;/&gt;</programlisting>
             
    <para><emphasis>message-handler-ref</emphasis> is the handler which receives the SSH request as messages 
    (in the request format described above). Message handler are fully described in <xref linkend="http-server"/> 
    and message handlers described there are supported.</para>
    
    <para>The <emphasis>&lt;citrus-ssh:server&gt;</emphasis> supports the following attributes:</para>
    
    <para><emphasis>SSH Server Attributes:</emphasis></para>
      
    <itemizedlist>
      <listitem><para><emphasis>id:</emphasis> 
      Name of the SSH server which identifies it unique within the Citrus Spring context
      (e.g. id="sshServer")</para></listitem>
    
      <listitem><para><emphasis>host-key-path:</emphasis>
      Path to PEM encoded key pair (public and private key) which is used as host key.  By default, a standard, 
      pre-generate, fixed keypair is used. The path can be specified either as an file path, or, if prefixed with
      <emphasis>classpath:</emphasis> is looked up from within the classpath. The path the is relative from to 
      the top-level package, so no leading slash should be used
      (e.g. hist-key-path="/etc/citrus_ssh_server.pem)</para></listitem>
    
      <listitem><para><emphasis>user:</emphasis>
      User which is allowed to connect (e.g. user="roland")</para></listitem>
    
      <listitem><para><emphasis>allowed-key-path:</emphasis>
      Path to a SSH public key stored in PEM format. These are the keys, which are allowed to connect to 
      the SSH server when publickey authentication is used. It seves the same purpose as <filename>authorized_keys</filename> 
      for standard SSH installations. The path can be specified either as an file path, or, if prefixed with 
      <emphasis>classpath:</emphasis> is looked up from within the classpath. The path the is relative from to the 
      top-level package, so no leading slash should be used
      (e.g. allowed-key-path="classpath:test_user_pub.pem)</para></listitem>
    
      <listitem><para><emphasis>password:</emphasis>
      Password which should be used when password authentication is used. Both publickey authentication 
      and password based authentication can be used together in which case both methods are tried in turn
      (e.g. password="s!cr!t")</para></listitem>
    
      <listitem><para><emphasis>host:</emphasis>
      Host address (e.g. localhost)</para></listitem>
    
      <listitem><para><emphasis>port:</emphasis>
      Port on which to listen. The SSH server will bind on localhost to this port
      (e.g. port="9072")</para></listitem>
    
      <listitem><para><emphasis>auto-start:</emphasis>
      Whether to start this SSH server automatically. Default is <emphasis>true</emphasis>. If set to
      <emphasis>false</emphasis>, a test action is responsible for starting/stopping the server
      (e.g. auto-start="true")</para></listitem>
      
      <listitem><para><emphasis>message-handler-ref:</emphasis>
      Bean reference to a message handler which processes the incoming SSH request. The message format for the request
      and response are described above (e.g. message-handler-ref="sshMessageHandler")</para></listitem>
    </itemizedlist>
  </section>
   
  <section id="ssh-client">
    <title>SSH Client</title>
    
    <para>A Citrus SSH client is useful for testing agains a real SSH server. It translates an SSH request 
    message into a real SSH call to a specific host, receives the result and translates it back to a response 
    message, which then can be validated by the usual Citrus means.</para>

    <para><emphasis>SSH Client Attributes:</emphasis></para>

    <itemizedlist>
      <listitem><para><emphasis>id:</emphasis>
      Id identifying the bean and used as reference from with test descriptions.
      (e.g. id="sshClient")</para></listitem>
    
      <listitem><para><emphasis>host:</emphasis>
      Host to connect to for sending an SSH Exec request. Default is 'localhost'
      (e.g. host="localhost")</para></listitem>
    
      <listitem><para><emphasis>port</emphasis>
      Port to use. Default is 2222 (e.g. port="9072")</para></listitem>
    
      <listitem><para><emphasis>private-key-path:</emphasis>
      Path to a private key, which can be either a plain file path or an class resource if prefixed with 'classpath'
      (e.g. private-key-path="classpath:test_user.priv")</para></listitem>
    
      <listitem><para><emphasis>private-key-password:</emphasis>
      Optional password for the private key (e.g. password="s!cr!t")</para></listitem>
    
      <listitem><para><emphasis>user:</emphasis>
      User used for connecting to the SSH server (e.g. user="roland")</para></listitem>
    
      <listitem><para><emphasis>password:</emphasis>
      Password used for password based authentication. Might be combined with "private-key-path" in which 
      case both authentication mechanism are tried (e.g. password="ps!st)</para></listitem>
    
      <listitem><para><emphasis>strict-host-checking:</emphasis>
      Whether the host key should be verified by looking it up in a 'known_hosts' file. Default is false
      (e.g. strict-host-checking="true")</para></listitem>
    
      <listitem><para><emphasis>known-hosts-path:</emphasis>
      Path to a known hosts file. If prefixed with 'classpath:' this file is looked up as a resource in the classpath
      (e.g. known-hosts-path="/etc/ssh/known_hosts")</para></listitem>
    
      <listitem><para><emphasis>command-timeout:</emphasis>
      Timeout in milliseconds for how long to wait for the SSH command to complete. Default is 5 minutes
      (e.g. command-timeout="300000")</para></listitem>
    
      <listitem><para><emphasis>connection-timeout:</emphasis>
      Timeout in milliseconds for how long to for a connectiuon to connect. Default is 1 minute
      (e.g. connection-timeout="60000")</para></listitem>
    
      <listitem><para><emphasis>reply-handler:</emphasis>
      Reference to reply handler which receives the SSH answer as a message. This reply handler should be specified with
      <emphasis>&lt;citrus-ssh:reply-handler&gt;</emphasis>. The reply handler follows the typical Citrus semantics.
      (e.g. reply-handler="sshResponseReceiver")</para></listitem>
    
      <listitem><para><emphasis>actor</emphasis>:
      Actor used for switching groups of actions (e.g. actor="ssh-mock")</para></listitem>
    </itemizedlist>
  </section>
</chapter>