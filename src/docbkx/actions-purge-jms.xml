<?xml version="1.0" encoding="UTF-8"?>
<section id="actions-purge-jms">
    <title>Purging JMS destinations</title>

    <para>Purging JMS destinations during the test run is quite essential. Different test cases can influence each other when sending
    messages to the same JMS destinations. A test case should only receive those messages that actually belong to it. Therefore it is a 
    good idea to purge all JMS queue destinations between the test cases. Obsolete messages that are stuck in a JMS queue for some 
    reason are then removed so that the following test case is not offended.</para>

    <note>
      <para>Citrus provides special support for JMS related features. We have to activate those JMS features in our test case by adding a special
        "citrus-jms" namespace and schema definition location to the test case XML.</para>

      <programlisting>&lt;spring:beans xmlns=&quot;http://www.citrusframework.org/schema/testcase&quot;
        xmlns:spring=&quot;http://www.springframework.org/schema/beans&quot;
        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        xmlns:jms=&quot;http://www.citrusframework.org/schema/jms/testcase&quot;
        xsi:schemaLocation=&quot;
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.citrusframework.org/schema/testcase
        http://www.citrusframework.org/schema/testcase/citrus-testcase.xsd
        http://www.citrusframework.org/schema/jms/testcase
        http://www.citrusframework.org/schema/jms/testcase/citrus-jms-testcase.xsd&quot;&gt;

    [...]

&lt;/beans&gt;</programlisting>
    </note>
    
    <para>Now we are ready to use the JMS features in our test case in order to purge some JMS queues. This can be done with following action definition:</para>
    
    <para><emphasis>XML DSL</emphasis></para>
    <programlisting>&lt;testcase name=&quot;purgeTest&quot;&gt;
  &lt;actions&gt;
      &lt;jms:purge-jms-queues&gt;
          &lt;jms:queue name=&quot;Some.JMS.QUEUE.Name&quot;/&gt;
          &lt;jms:queue name=&quot;Another.JMS.QUEUE.Name&quot;/&gt;
          &lt;jms:queue name=&quot;My.JMS.QUEUE.Name&quot;/&gt;
      &lt;/jms:purge-jms-queues&gt;
      
      &lt;jms:purge-jms-queues connection-factory=&quot;connectionFactory&quot;&gt;
          &lt;jms:queue name=&quot;Some.JMS.QUEUE.Name&quot;/&gt;
          &lt;jms:queue name=&quot;Another.JMS.QUEUE.Name&quot;/&gt;
          &lt;jms:queue name=&quot;My.JMS.QUEUE.Name&quot;/&gt;
      &lt;/jms:purge-jms-queues&gt;
  &lt;/actions&gt;
&lt;/testcase&gt;</programlisting>

    <para>Notice that we have referenced the <emphasis>jms</emphasis> namespace when using the <emphasis>purge-jms-queues</emphasis> test action.</para>

    <para><emphasis>Java DSL</emphasis></para>
    <programlisting language="java">@Autowired
@Qualifier("connectionFactory")
private ConnectionFactory connectionFactory;

@CitrusTest
public void purgeTest() {
    purgeQueues()
        .queue("Some.JMS.QUEUE.Name")
        .queue("Another.JMS.QUEUE.Name");
        
    purgeQueues(connectionFactory)
        .timeout(150L) // custom timeout in ms
        .queue("Some.JMS.QUEUE.Name")
        .queue("Another.JMS.QUEUE.Name");
}</programlisting>
    
    <para>Purging the JMS queues in every test case is quite exhausting because every test case needs to define a purging action at the 
    very beginning of the test. Fortunately the test suite definition offers tasks to run before, between and after the test cases which 
    should ease up this tasks a lot. The test suite offers a very simple way to purge the destinations between the tests. 
    See <xref linkend="testsuite-before-test"/> for more information about this.</para>
        
    <para>When using the special tasks between a test case you might define a normal Spring bean definition that is referenced then. The 
    'com.consol.citrus.actions.PurgeJmsQueuesAction' action offers the property "queueNames" to hold all destination names 
    that are supposed to be purged. As you can see in the next example it is quite easy to specify a group of destinations in the Spring configuration.
    This purging bean is then added to the test suite in the tasks between section.</para>
    
    <programlisting>&lt;bean id=&quot;purgeJmsQueues&quot;
    class=&quot;com.consol.citrus.actions.PurgeJmsQueuesAction&quot;&gt;
    &lt;property name=&quot;connectionFactory&quot; ref=&quot;jmsQueueConnectionFactory&quot;/&gt;
    &lt;property name=&quot;queueNames&quot;&gt;
        &lt;list&gt;
            &lt;value&gt;${jms.queue.hello.request.in}&lt;/value&gt;
            &lt;value&gt;${jms.queue.hello.response.out}&lt;/value&gt;
            &lt;value&gt;${jms.queue.echo.request}&lt;/value&gt;
            &lt;value&gt;${jms.queue.echo.response}&lt;/value&gt;
            &lt;value&gt;JMS.Queue.Dummy&lt;/value&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting>
    
    <para>So now we are able to purge JMS destinations with given destination names. But sometimes we do not want to rely on queue or topic names as 
    we retrieve destinations over JNDI for instance. We can deal with destinations coming from JNDI lookup like follows:</para>
    
    <programlisting>&lt;jee:jndi-lookup id=&quot;jmsQueueHelloRequestIn&quot; jndi-name=&quot;jms/jmsQueueHelloRequestIn&quot;/&gt;
&lt;jee:jndi-lookup id=&quot;jmsQueueHelloResponseOut&quot; jndi-name=&quot;jms/jmsQueueHelloResponseOut&quot;/&gt;

&lt;bean id=&quot;purgeJmsQueues&quot;
    class=&quot;com.consol.citrus.actions.PurgeJmsQueuesAction&quot;&gt;
    &lt;property name=&quot;connectionFactory&quot; ref=&quot;jmsQueueConnectionFactory&quot;/&gt;
    &lt;property name=&quot;queues&quot;&gt;
        &lt;list&gt;
            &lt;ref bean=&quot;jmsQueueHelloRequestIn&quot;/&gt;
            &lt;ref bean=&quot;jmsQueueHelloResponseOut&quot;/&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting>
    
    <para>We just use the property <emphasis>'queues'</emphasis> instead of <emphasis>'queueNames'</emphasis> and Citrus will be able to receive 
    bean references that resolve to JMS destinations. We can purge these destination references in a test case, too. Just use the <emphasis>'ref'</emphasis>
    attribute instead of already known <emphasis>'name'</emphasis> attribute:</para>
    
    <para><emphasis>XML DSL</emphasis></para>
    <programlisting>&lt;testcase name=&quot;purgeTest&quot;&gt;
  &lt;actions&gt;
      &lt;jms:purge-jms-queues&gt;
          &lt;jms:queue ref=&quot;jmsQueueHelloRequestIn&quot;/&gt;
          &lt;jms:queue ref=&quot;jmsQueueHelloResponseOut&quot;/&gt;
      &lt;/jms:purge-jms-queues&gt;
  &lt;/actions&gt;
&lt;/testcase&gt;</programlisting>

    <para>Of course you can use queue object references also in Java DSL test cases. Here we easily can use Spring's dependency injection with autowiring to
    get the object references from the container.</para>
    
    <para><emphasis>Java DSL</emphasis></para>
    <programlisting language="java">@Autowired
@Qualifier("jmsQueueHelloRequestIn")
private Queue jmsQueueHelloRequestIn;

@Autowired
@Qualifier("jmsQueueHelloResponseOut")
private Queue jmsQueueHelloResponseOut;

@CitrusTest
public void purgeTest() {
    purgeQueues()
        .queue(jmsQueueHelloRequestIn)
        .queue(jmsQueueHelloResponseOut);
}</programlisting>

    <note>
        <para>You can mix queue name and queue object references as you like within one single purge queue test action.</para>
    </note>

</section>