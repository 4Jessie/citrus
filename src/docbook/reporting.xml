<?xml version="1.0" encoding="UTF-8"?>
<chapter id="reporting">
    <title>Reporting and test results</title>
  
    <para>The framework generates different reports and results after a test run for you. These report and result pages will
    help you to get an overview of the test cases that were executed and which one were failing.</para>
  
    <section id="reporting-logging">
        <title>Console logging</title>
    
        <para>During the test run the framework will provide a huge amount of information that is printed out to
        the console. This includes current test progress, validation results and error information. This
        enables the user to quickly supervise the test run progress. Failures in tests will be printed to the
        console just the time the error occurred. The detailed stack trace information and the detailed
        error messages are be helpful to get the idea what went wrong.</para>

        <para>As the console output might be limited to a defined buffer limit, the user may not be able to
        follow the output to the very beginning of the test run. Therefore the framework additionally
        prints all information to a log file.</para>
    
        <para>The logging mechanism uses the SLF4J logging framework. SLF4J is independent of logging framework implementations on the 
        market. So in case you use Log4J logging framework the specified log file path as well as logging levels can be freely configured 
        in the respective log4j.xml file in your project. At the end of a test run the combined test results get printed to both console 
        and log file. The overall test results look like following example:</para>
        
        <programlisting>
            <literal>
    TEST RESULTS IntegrationTests
    
      [...]
      BillingAdapter_ACTSUB_Ok : successfull
      BillingAdapter_ACTSUB_Ok_NoBillingDetails : successfull
      BillingAdapter_CHGTRF_Ok : successfull
      BillingAdapter_DEASUB_Ok : successfull
      BillingAdapter_EXPMSN_Ok : successfull
      BillingAdapter_EXPMSN_Ok_2 : successfull
      BillingAdapter_MIGOPT_Ok : successfull
      BillingAdapter_OK_1 : successfull
      [...]
      
      Found 175 test cases to execute
      Skipped 0 test cases (58.9%)
      Executed 175 test cases, containing 9072 actions
      Tests failed:         0 (0.0%)
      Tests successfully: 175 (100.0%)
      ________________________________________________________________________
      ________________________________________________________________________
      
      OVERALL TEST RESULTS
      
      Found 175 test cases to execute
      Executed 175 test cases
      Tests failed:         0 (0.0%)
      Tests successfully: 175 (100.0%)
            </literal>
        </programlisting>
        
        <para>Failed tests will be marked as failed in the result list. The framework will give a short description
        of the error cause while the detailed stack trace information can be found in the log messages
        that were made during the test run.</para>
        
        <programlisting>
            <literal>IT_OrdPre_Performance_Ok : failed - Exception is Action timed out</literal>
        </programlisting>
    </section>
    
    <section id="reporting-junit">
        <title>JUnit reports</title>
    
        <para>The framework will also generate JUnit compliant XML and HTML reports. JUnit is a very
        popular and powerful Java unit testing framework that is supported by mostly all build
        management and development tools. The approach to generate JUnit compliant reports has
        become standard when dealing with report formats. The Test Framework uses this approach in
        order to offer reports that can be included into the build management systems or any other
        reporting framework.</para>
        
        <para>After the test run following directories contain the different JUnit reports:</para>
        
        <itemizedlist>
            <listitem>
                <para>test-output -&gt; JUnit results in XML format (can be used in build management tools)</para>
            </listitem>
            <listitem>
                <para>test-report -&gt; Generated default HTML JUnit report</para>
            </listitem>
        </itemizedlist>
        
        <para>Build management tools like Hudson, Bamboo or CruiseControl can easily import the generated JUnit XML results into the overall
        build results.</para>
        
        <para>In the following you can see an example report generated by the build management tool
        Hudson:</para>
        
        <para>
          <mediaobject>
            <imageobject role="fo">
              <imagedata align="center" display="block" fileref="images/reporting.png" format="PNG" />
            </imageobject>
            
            <imageobject role="html">
              <imagedata align="center" display="block" fileref="images/reporting.png" format="PNG" />
            </imageobject>
          </mediaobject>
        </para>
        
    </section>
    
</chapter>