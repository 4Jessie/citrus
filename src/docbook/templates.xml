<?xml version="1.0" encoding="UTF-8"?>
<chapter id="templates">
    <title>Templates</title>

    <para>Templates will group action sequences to a logical unit. You can think of templates as reusable components
    that may be used in several tests. Once a template is configured they are referenced inside a test case. The maintenance
    will be much more effective as the templates will be reused many times.</para>
    
    <para>The template has a unique name. In the test case the template is called by this unique name. We will
    have a look at a first example:</para>
  
    <programlisting>
  &lt;template name=&quot;doCreateVariables&quot;&gt;
      &lt;createVariables&gt;
          &lt;variable name=&quot;var&quot; value=&quot;123456789&quot;/&gt;
      &lt;/createVariables&gt;
      
      &lt;call-template name=&quot;doTraceVariables&quot;/&gt;
  &lt;/template&gt;
  
  &lt;template name=&quot;doTraceVariables&quot;&gt;
      &lt;echo&gt;
          &lt;message&gt;Current time is: ${time}&lt;/message&gt;
      &lt;/echo&gt;
      
      &lt;traceVariables/&gt;
  &lt;/template&gt;
    </programlisting>
  
    <para>The code example above describes two template definitions. Each template has to define a name using
    the respective attribute &quot;name&quot;. Templates usually hold a sequence of test actions as seen in the first template which
    contains the two test actions &lt;echo&gt; and &lt;traceVariables&gt;. Besides that you are allowed to create a hierarchy 
    of templates when a template calls other templates.</para>
    
    <note>
      <para>The &lt;call-template&gt; action calls other templates by their name. The called
      template not necessarily has to be located in the same test case XML file, but it can be defined in
      a separate XML file other than the test case itself:</para>
    </note>
    
    <programlisting>
  &lt;testcase name=&quot;templateTest&quot;&gt;
      &lt;variables&gt;
          &lt;variable name=&quot;myTime&quot; value=&quot;citrus:currentDate()&quot;/&gt;
      &lt;/variables&gt;
      &lt;actions&gt;
          &lt;call-template name=&quot;doCreateVariables&quot;/&gt;
          
          &lt;call-template name=&quot;doTraceVariables&quot;&gt;
              &lt;parameter name=&quot;time&quot; value=&quot;${myTime}&quot;&gt;
          &lt;/call-template&gt;
      &lt;/actions&gt;
  &lt;/testcase&gt;
    </programlisting>
    
    <para>Templates usually will also make use of variables. This means that these variables have to be present with 
    respective values as soon as the template gets called. Otherwise the variables would be unknown to the test case and raise errors.
    So either the variables are present in the calling test case anyway or the variables are explicitly set as parameters 
    when calling the template. Again if a variable is unknown the template will fail with errors.</para>
    
    <para>The &quot;doTraceVariables&quot; template faces this problem as it uses the variable ${time}. The test case must declare
    the variable ${time} as a parameter when calling the template. Otherwise the test execution would fail in unknown variable error.
    The parameters ensure that the template will work with the declared variables. The next example should clarify the usage of template
    parameters in more detail:</para>
    
    <programlisting>
  &lt;testcase name=&quot;templateTest&quot;&gt;
      &lt;variables&gt;
          &lt;variable name=&quot;text&quot; value=&quot;Hello TestFramework&quot;/&gt;
      &lt;/variables&gt;
      &lt;actions&gt;
          &lt;call-template name=&quot;print&quot;&gt;
              &lt;parameter name=&quot;param1&quot; value=&quot;Test1&quot;/&gt;
              &lt;parameter name=&quot;param2&quot; value=&quot;${text}&quot;/&gt;
          &lt;/call-template&gt;
      &lt;/actions&gt;
  &lt;/testcase&gt;
    </programlisting>
    
    <para>The parameters <emphasis>param1</emphasis> and <emphasis>param2</emphasis> are set with the respective values. 
    If you leave out the parameter mapping make sure that the variables <emphasis>param1</emphasis> and <emphasis>param2</emphasis> 
    already exist in your test case.</para>
    
</chapter>