package com.consol.citrus.ssh;

import java.io.IOException;

import com.consol.citrus.adapter.handler.EmptyResponseProducingMessageHandler;
import com.consol.citrus.exceptions.CitrusRuntimeException;
import com.consol.citrus.message.MessageHandler;
import com.consol.citrus.server.AbstractServer;
import org.apache.sshd.SshServer;
import org.apache.sshd.common.KeyPairProvider;
import org.apache.sshd.common.keyprovider.FileKeyPairProvider;
import org.apache.sshd.common.keyprovider.ResourceKeyPairProvider;
import org.apache.sshd.server.Command;
import org.apache.sshd.server.CommandFactory;
import org.springframework.beans.BeansException;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.util.StringUtils;

/**
 * SSH Server implemented with Apache SSHD (http://mina.apache.org/sshd/).
 *
 * It uses the same semantic as the Jetty Servers for HTTP and WS mocks and translates
 * an incoming request into a message, for which a reply message gets translates to
 * the SSH return value.
 *
 * The incoming message generated has the following format:
 *
 * <ssh-request>
 *   <command>cat -</command>
 *   <stdin>This is the standard input sent</stdin>
 * </ssh-request>
 *
 * The reply message to be generated by a handler should have the following format
 *
 * <ssh-response>
 *   <exit>0</exit>
 *   <stdout>This is the standard input sent</stdout>
 *   <stderr>warning: no tty</stderr>
 * </ssh-response>
 *
 * @author roland
 * @since 04.09.12
 */
public class CitrusSshServer extends AbstractServer {

    // Port to listen to
    private int port = 22;

    // User allowed to connect
    private String user;

    // User's password or ...
    private String password;

    // ... path to its public key
    // Use this to convert to PEM: ssh-keygen -f key.pub -e -m pem
    private String allowedKeyPath;

    // Path to our own host keys. If not provided, a default is used. The format of this
    // file should be PEM, a serialized {@link KeyPair}.
    private String hostKeyPath;

    // SSH server used
    private SshServer sshd;

    // MessageHandler for validation purposes
    private MessageHandler messageHandler = new EmptyResponseProducingMessageHandler();

    @Override
    protected void startup() {
        if (!StringUtils.hasText(user)) {
            throw new CitrusRuntimeException("No 'user' provided (mandatory for authentication)");
        }
        sshd = SshServer.setUpDefaultServer();
        sshd.setPort(port);
        KeyPairProvider prov =
                hostKeyPath != null ?
                        new FileKeyPairProvider(new String[] {hostKeyPath}) :
                        new ResourceKeyPairProvider(new String[] { "com/consol/citrus/ssh/citrus.pem" });
        sshd.setKeyPairProvider(prov);

        // Authentication
        boolean authFound = false;
        if (password != null) {
            sshd.setPasswordAuthenticator(new SimplePasswordAuthenticator(user,password));
            authFound = true;
        }
        if (allowedKeyPath != null) {
            sshd.setPublickeyAuthenticator(new SinglePublicKeyAuthenticator(user,allowedKeyPath));
            authFound = true;
        }
        if (!authFound) {
            throw new CitrusRuntimeException("Neither 'password' nor 'allowed-key-path' is set. Please provide at least one");
        }

        // Setup message handler
        sshd.setCommandFactory(new CommandFactory() {
            public Command createCommand(String command) {
                return new CitrusSshCommand(command,messageHandler);
            }
        });

        try {
            sshd.start();
        } catch (IOException e) {
            throw new CitrusRuntimeException("Cannot start SSHD: " + e,e);
        }
    }

    @Override
    protected void shutdown() {
        try {
            sshd.stop();
        } catch (InterruptedException e) {
            throw new CitrusRuntimeException("Cannot stop SSHD: " + e,e);
        }
    }

}
